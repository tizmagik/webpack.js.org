(self.webpackChunk=self.webpackChunk||[]).push([[950],{950:function(n,e,s){"use strict";s.r(e),e.default='<aside class="tip"><h6 class="tip__prefix">tip</h6><p>This guide is a small follow-up to <a href="/guides/code-splitting">Code Splitting</a>. If you have not yet read through that guide, please do so now.</p></aside> <p>Lazy, or "on demand", loading is a great way to optimize your site or application. This practice essentially involves splitting your code at logical breakpoints, and then loading it once the user has done something that requires, or will require, a new block of code. This speeds up the initial load of the application and lightens its overall weight as some blocks may never even be loaded.</p> <h2 id="example">Example<a href="#example" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>Let\'s take the example from <a href="/guides/code-splitting/#dynamic-imports">Code Splitting</a> and tweak it a bit to demonstrate this concept even more. The code there does cause a separate chunk, <code>lodash.bundle.js</code>, to be generated and technically "lazy-loads" it as soon as the script is run. The trouble is that no user interaction is required to load the bundle â€“ meaning that every time the page is loaded, the request will fire. This doesn\'t help us too much and will impact performance negatively.</p> <p>Let\'s try something different. We\'ll add an interaction to log some text to the console when the user clicks a button. However, we\'ll wait to load that code (<code>print.js</code>) until the interaction occurs for the first time. To do this we\'ll go back and rework the <a href="/guides/code-splitting/#dynamic-imports">final <em>Dynamic Imports</em> example</a> from <em>Code Splitting</em> and leave <code>lodash</code> in the main chunk.</p> <p><strong>project</strong></p> <pre><code class="hljs language-diff">webpack-demo\n|- package.json\n|- webpack.config.js\n|- /dist\n|- /src\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> |- index.js\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> |- print.js\n</span></span>|- /node_modules</code></pre> <p><strong>src/print.js</strong></p> <pre><code class="hljs language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>\n  <span class="token string">\'The print.js module has loaded! See the network tab in dev tools...\'</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Button Clicked: Here\\\'s "some text"!\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p><strong>src/index.js</strong></p> <pre><code class="hljs language-diff"><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> import _ from \'lodash\';\n</span><span class="token prefix inserted">+</span><span class="token line">\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> async function getComponent() {\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> function component() {\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   const element = document.createElement(\'div\');\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">   const _ = await import(/* webpackChunkName: "lodash" */ \'lodash\');\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   const button = document.createElement(\'button\');\n</span><span class="token prefix inserted">+</span><span class="token line">   const br = document.createElement(\'br\');\n</span></span>\n<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   button.innerHTML = \'Click me and look at the console!\';\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   element.appendChild(br);\n</span><span class="token prefix inserted">+</span><span class="token line">   element.appendChild(button);\n</span><span class="token prefix inserted">+</span><span class="token line">\n</span><span class="token prefix inserted">+</span><span class="token line">   // Note that because a network request is involved, some indication\n</span><span class="token prefix inserted">+</span><span class="token line">   // of loading would need to be shown in a production-level site/app.\n</span><span class="token prefix inserted">+</span><span class="token line">   button.onclick = e => import(/* webpackChunkName: "print" */ \'./print\').then(module => {\n</span><span class="token prefix inserted">+</span><span class="token line">     const print = module.default;\n</span><span class="token prefix inserted">+</span><span class="token line">\n</span><span class="token prefix inserted">+</span><span class="token line">     print();\n</span><span class="token prefix inserted">+</span><span class="token line">   });\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   return element;\n</span><span class="token prefix unchanged"> </span><span class="token line"> }\n</span></span>\n<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> getComponent().then(component => {\n</span><span class="token prefix deleted">-</span><span class="token line">   document.body.appendChild(component);\n</span><span class="token prefix deleted">-</span><span class="token line"> });\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> document.body.appendChild(component());</span></span></code></pre> <aside class="warning"><h6 class="warning__prefix">warning</h6><p>Note that when using <code>import()</code> on ES6 modules you must reference the <code>.default</code> property as it\'s the actual <code>module</code> object that will be returned when the promise is resolved.</p></aside> <p>Now let\'s run webpack and check out our new lazy-loading functionality:</p> <pre><code class="hljs language-bash"><span class="token punctuation">..</span>.\n          Asset       Size  Chunks                    Chunk Names\nprint.bundle.js  <span class="token number">417</span> bytes       <span class="token number">0</span>  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>         print\nindex.bundle.js     <span class="token number">548</span> kB       <span class="token number">1</span>  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>  index\n     index.html  <span class="token number">189</span> bytes          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\n<span class="token punctuation">..</span>.</code></pre> <h2 id="frameworks">Frameworks<a href="#frameworks" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>Many frameworks and libraries have their own recommendations on how this should be accomplished within their methodologies. Here are a few examples:</p> <ul> <li>React: <a href="https://reacttraining.com/react-router/web/guides/code-splitting">Code Splitting and Lazy Loading</a></li> <li>Vue: <a href="https://vuedose.tips/tips/dynamic-imports-in-vue-js-for-better-performance/">Dynamic Imports in Vue.js for better performance</a></li> <li>Angular: <a href="https://angular.io/guide/router#milestone-6-asynchronous-routing">Lazy Loading route configuration</a> and <a href="https://medium.com/@var_bin/angularjs-webpack-lazyload-bb7977f390dd">AngularJS + webpack = lazyLoad</a></li> </ul> '}}]);