(self.webpackChunk=self.webpackChunk||[]).push([[3389],{3389:function(n,s,a){"use strict";a.r(s),s.default='<aside class="tip"><h6 class="tip__prefix">tip</h6><p>The examples in this guide stem from <a href="/guides/getting-started">getting started</a>, <a href="/guides/output-management">output management</a> and <a href="/guides/code-splitting">code splitting</a>.</p></aside> <p>So we\'re using webpack to bundle our modular application which yields a deployable <code>/dist</code> directory. Once the contents of <code>/dist</code> have been deployed to a server, clients (typically browsers) will hit that server to grab the site and its assets. The last step can be time consuming, which is why browsers use a technique called <a href="https://en.wikipedia.org/wiki/Cache_(computing)">caching</a>. This allows sites to load faster with less unnecessary network traffic. However, it can also cause headaches when you need new code to be picked up.</p> <p>This guide focuses on the configuration needed to ensure files produced by webpack compilation can remain cached unless their content has changed.</p> <h2 id="output-filenames">Output Filenames<a href="#output-filenames" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>We can use the <code>output.filename</code> <a href="/configuration/output/#outputfilename">substitutions</a> setting to define the names of our output files. webpack provides a method of templating the filenames using bracketed strings called <strong>substitutions</strong>. The <code>[contenthash]</code> substitution will add a unique hash based on the content of an asset. When the asset\'s content changes, <code>[contenthash]</code> will change as well.</p> <p>Let\'s get our project set up using the example from <a href="/guides/getting-started">getting started</a> with the <code>plugins</code> from <a href="/guides/output-management">output management</a>, so we don\'t have to deal with maintaining our <code>index.html</code> file manually:</p> <p><strong>project</strong></p> <pre><code class="hljs language-diff">webpack-demo\n|- package.json\n|- webpack.config.js\n|- /dist\n|- /src\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> |- index.js\n</span></span>|- /node_modules</code></pre> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const path = require(\'path\');\n</span><span class="token prefix unchanged"> </span><span class="token line"> const HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">   entry: \'./src/index.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">   plugins: [\n</span><span class="token prefix unchanged"> </span><span class="token line">     new HtmlWebpackPlugin({\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">       title: \'Output Management\',\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">       title: \'Caching\',\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     }),\n</span><span class="token prefix unchanged"> </span><span class="token line">   ],\n</span><span class="token prefix unchanged"> </span><span class="token line">   output: {\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">     filename: \'bundle.js\',\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     filename: \'[name].[contenthash].js\',\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">     clean: true,\n</span><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line"> };</span></span></code></pre> <p>Running our build script, <code>npm run build</code>, with this configuration should produce the following output:</p> <pre><code class="hljs language-bash"><span class="token punctuation">..</span>.\n                       Asset       Size  Chunks                    Chunk Names\nmain.7e2c49a622975ebd9b7e.js     <span class="token number">544</span> kB       <span class="token number">0</span>  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>  main\n                  index.html  <span class="token number">197</span> bytes          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\n<span class="token punctuation">..</span>.</code></pre> <p>As you can see the bundle\'s name now reflects its content (via the hash). If we run another build without making any changes, we\'d expect that filename to stay the same. However, if we were to run it again, we may find that this is not the case:</p> <pre><code class="hljs language-bash"><span class="token punctuation">..</span>.\n                       Asset       Size  Chunks                    Chunk Names\nmain.205199ab45963f6a62ec.js     <span class="token number">544</span> kB       <span class="token number">0</span>  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>  main\n                  index.html  <span class="token number">197</span> bytes          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\n<span class="token punctuation">..</span>.</code></pre> <p>This is because webpack includes certain boilerplate, specifically the runtime and manifest, in the entry chunk.</p> <aside class="warning"><h6 class="warning__prefix">warning</h6><p>Output may differ depending on your current webpack version. Newer versions may not have all the same issues with hashing as some older versions, but we still recommend the following steps to be safe.</p></aside> <h2 id="extracting-boilerplate">Extracting Boilerplate<a href="#extracting-boilerplate" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>As we learned in <a href="/guides/code-splitting">code splitting</a>, the <a href="/plugins/split-chunks-plugin/"><code>SplitChunksPlugin</code></a> can be used to split modules out into separate bundles. webpack provides an optimization feature to split runtime code into a separate chunk using the <a href="/configuration/optimization/#optimizationruntimechunk"><code>optimization.runtimeChunk</code></a> option. Set it to <code>single</code> to create a single runtime bundle for all chunks:</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const path = require(\'path\');\n</span><span class="token prefix unchanged"> </span><span class="token line"> const HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">   entry: \'./src/index.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">   plugins: [\n</span><span class="token prefix unchanged"> </span><span class="token line">     new HtmlWebpackPlugin({\n</span><span class="token prefix unchanged"> </span><span class="token line">       title: \'Caching\',\n</span><span class="token prefix unchanged"> </span><span class="token line">     }),\n</span><span class="token prefix unchanged"> </span><span class="token line">   ],\n</span><span class="token prefix unchanged"> </span><span class="token line">   output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     filename: \'[name].[contenthash].js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">     path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">     clean: true,\n</span><span class="token prefix unchanged"> </span><span class="token line">   },\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   optimization: {\n</span><span class="token prefix inserted">+</span><span class="token line">     runtimeChunk: \'single\',\n</span><span class="token prefix inserted">+</span><span class="token line">   },\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> };</span></span></code></pre> <p>Let\'s run another build to see the extracted <code>runtime</code> bundle:</p> <pre><code class="hljs language-bash">Hash: 82c9c385607b2150fab2\nVersion: webpack <span class="token number">4.12</span>.0\nTime: 3027ms\n                          Asset       Size  Chunks             Chunk Names\nruntime.cc17ae2a94ec771e9221.js   <span class="token number">1.42</span> KiB       <span class="token number">0</span>  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  runtime\n   main.e81de2cf758ada72f306.js   <span class="token number">69.5</span> KiB       <span class="token number">1</span>  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  main\n                     index.html  <span class="token number">275</span> bytes          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/module.js <span class="token number">497</span> bytes <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>webpack<span class="token punctuation">)</span>/buildin/global.js <span class="token number">489</span> bytes <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> ./src/index.js <span class="token number">309</span> bytes <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span> <span class="token punctuation">[</span>built<span class="token punctuation">]</span>\n    + <span class="token number">1</span> hidden module</code></pre> <p>It\'s also good practice to extract third-party libraries, such as <code>lodash</code> or <code>react</code>, to a separate <code>vendor</code> chunk as they are less likely to change than our local source code. This step will allow clients to request even less from the server to stay up to date. This can be done by using the <a href="/plugins/split-chunks-plugin/#splitchunkscachegroups"><code>cacheGroups</code></a> option of the <a href="/plugins/split-chunks-plugin/"><code>SplitChunksPlugin</code></a> demonstrated in <a href="/plugins/split-chunks-plugin/#split-chunks-example-2">Example 2 of SplitChunksPlugin</a>. Lets add <code>optimization.splitChunks</code> with <code>cacheGroups</code> with next params and build:</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const path = require(\'path\');\n</span><span class="token prefix unchanged"> </span><span class="token line"> const HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">   entry: \'./src/index.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">   plugins: [\n</span><span class="token prefix unchanged"> </span><span class="token line">     new HtmlWebpackPlugin({\n</span><span class="token prefix unchanged"> </span><span class="token line">       title: \'Caching\',\n</span><span class="token prefix unchanged"> </span><span class="token line">     }),\n</span><span class="token prefix unchanged"> </span><span class="token line">   ],\n</span><span class="token prefix unchanged"> </span><span class="token line">   output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     filename: \'[name].[contenthash].js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">     path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">     clean: true,\n</span><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line">   optimization: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     runtimeChunk: \'single\',\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     splitChunks: {\n</span><span class="token prefix inserted">+</span><span class="token line">       cacheGroups: {\n</span><span class="token prefix inserted">+</span><span class="token line">         vendor: {\n</span><span class="token prefix inserted">+</span><span class="token line">           test: /[\\\\/]node_modules[\\\\/]/,\n</span><span class="token prefix inserted">+</span><span class="token line">           name: \'vendors\',\n</span><span class="token prefix inserted">+</span><span class="token line">           chunks: \'all\',\n</span><span class="token prefix inserted">+</span><span class="token line">         },\n</span><span class="token prefix inserted">+</span><span class="token line">       },\n</span><span class="token prefix inserted">+</span><span class="token line">     },\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line"> };</span></span></code></pre> <p>Let\'s run another build to see our new <code>vendor</code> bundle:</p> <pre><code class="hljs language-bash"><span class="token punctuation">..</span>.\n                          Asset       Size  Chunks             Chunk Names\nruntime.cc17ae2a94ec771e9221.js   <span class="token number">1.42</span> KiB       <span class="token number">0</span>  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  runtime\nvendors.a42c3ca0d742766d7a28.js   <span class="token number">69.4</span> KiB       <span class="token number">1</span>  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  vendors\n   main.abf44fedb7d11d4312d7.js  <span class="token number">240</span> bytes       <span class="token number">2</span>  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  main\n                     index.html  <span class="token number">353</span> bytes          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\n<span class="token punctuation">..</span>.</code></pre> <p>We can now see that our <code>main</code> bundle does not contain <code>vendor</code> code from <code>node_modules</code> directory and is down in size to <code>240 bytes</code>!</p> <h2 id="module-identifiers">Module Identifiers<a href="#module-identifiers" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>Let\'s add another module, <code>print.js</code>, to our project:</p> <p><strong>project</strong></p> <pre><code class="hljs language-diff">webpack-demo\n|- package.json\n|- webpack.config.js\n|- /dist\n|- /src\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> |- index.js\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> |- print.js\n</span></span>|- /node_modules</code></pre> <p><strong>print.js</strong></p> <pre><code class="hljs language-diff"><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> export default function print(text) {\n</span><span class="token prefix inserted">+</span><span class="token line">   console.log(text);\n</span><span class="token prefix inserted">+</span><span class="token line"> };</span></span></code></pre> <p><strong>src/index.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> import _ from \'lodash\';\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> import Print from \'./print\';\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> function component() {\n</span><span class="token prefix unchanged"> </span><span class="token line">   const element = document.createElement(\'div\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   // Lodash, now imported by this script\n</span><span class="token prefix unchanged"> </span><span class="token line">   element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   element.onclick = Print.bind(null, \'Hello webpack!\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   return element;\n</span><span class="token prefix unchanged"> </span><span class="token line"> }\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> document.body.appendChild(component());</span></span></code></pre> <p>Running another build, we would expect only our <code>main</code> bundle\'s hash to change, however...</p> <pre><code class="hljs language-bash"><span class="token punctuation">..</span>.\n                           Asset       Size  Chunks                    Chunk Names\n  runtime.1400d5af64fc1b7b3a45.js    <span class="token number">5.85</span> kB      <span class="token number">0</span>  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>         runtime\n  vendor.a7561fb0e9a071baadb9.js     <span class="token number">541</span> kB       <span class="token number">1</span>  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  <span class="token punctuation">[</span>big<span class="token punctuation">]</span>  vendor\n    main.b746e3eb72875af2caa9.js    <span class="token number">1.22</span> kB       <span class="token number">2</span>  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>         main\n                      index.html  <span class="token number">352</span> bytes          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\n<span class="token punctuation">..</span>.</code></pre> <p>... we can see that all three have. This is because each <a href="/api/module-variables/#moduleid-commonjs"><code>module.id</code></a> is incremented based on resolving order by default. Meaning when the order of resolving is changed, the IDs will be changed as well. So, to recap:</p> <ul> <li>The <code>main</code> bundle changed because of its new content.</li> <li>The <code>vendor</code> bundle changed because its <code>module.id</code> was changed.</li> <li>And, the <code>runtime</code> bundle changed because it now contains a reference to a new module.</li> </ul> <p>The first and last are expected, it\'s the <code>vendor</code> hash we want to fix. Let\'s use <a href="/configuration/optimization/#optimizationmoduleids"><code>optimization.moduleIds</code></a> with <code>\'deterministic\'</code> option:</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const path = require(\'path\');\n</span><span class="token prefix unchanged"> </span><span class="token line"> const HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">   entry: \'./src/index.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">   plugins: [\n</span><span class="token prefix unchanged"> </span><span class="token line">     new HtmlWebpackPlugin({\n</span><span class="token prefix unchanged"> </span><span class="token line">       title: \'Caching\',\n</span><span class="token prefix unchanged"> </span><span class="token line">     }),\n</span><span class="token prefix unchanged"> </span><span class="token line">   ],\n</span><span class="token prefix unchanged"> </span><span class="token line">   output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     filename: \'[name].[contenthash].js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">     path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">     clean: true,\n</span><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line">   optimization: {\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     moduleIds: \'deterministic\',\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     runtimeChunk: \'single\',\n</span><span class="token prefix unchanged"> </span><span class="token line">     splitChunks: {\n</span><span class="token prefix unchanged"> </span><span class="token line">       cacheGroups: {\n</span><span class="token prefix unchanged"> </span><span class="token line">         vendor: {\n</span><span class="token prefix unchanged"> </span><span class="token line">           test: /[\\\\/]node_modules[\\\\/]/,\n</span><span class="token prefix unchanged"> </span><span class="token line">           name: \'vendors\',\n</span><span class="token prefix unchanged"> </span><span class="token line">           chunks: \'all\',\n</span><span class="token prefix unchanged"> </span><span class="token line">         },\n</span><span class="token prefix unchanged"> </span><span class="token line">       },\n</span><span class="token prefix unchanged"> </span><span class="token line">     },\n</span><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line"> };</span></span></code></pre> <p>Now, despite any new local dependencies, our <code>vendor</code> hash should stay consistent between builds:</p> <pre><code class="hljs language-bash"><span class="token punctuation">..</span>.\n                          Asset       Size  Chunks             Chunk Names\n   main.216e852f60c8829c2289.js  <span class="token number">340</span> bytes       <span class="token number">0</span>  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  main\nvendors.55e79e5927a639d21a1b.js   <span class="token number">69.5</span> KiB       <span class="token number">1</span>  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  vendors\nruntime.725a1a51ede5ae0cfde0.js   <span class="token number">1.42</span> KiB       <span class="token number">2</span>  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  runtime\n                     index.html  <span class="token number">353</span> bytes          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\nEntrypoint main <span class="token operator">=</span> runtime.725a1a51ede5ae0cfde0.js vendors.55e79e5927a639d21a1b.js main.216e852f60c8829c2289.js\n<span class="token punctuation">..</span>.</code></pre> <p>And let\'s modify our <code>src/index.js</code> to temporarily remove that extra dependency:</p> <p><strong>src/index.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> import _ from \'lodash\';\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> import Print from \'./print\';\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> // import Print from \'./print\';\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> function component() {\n</span><span class="token prefix unchanged"> </span><span class="token line">   const element = document.createElement(\'div\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   // Lodash, now imported by this script\n</span><span class="token prefix unchanged"> </span><span class="token line">   element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">   element.onclick = Print.bind(null, \'Hello webpack!\');\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   // element.onclick = Print.bind(null, \'Hello webpack!\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   return element;\n</span><span class="token prefix unchanged"> </span><span class="token line"> }\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> document.body.appendChild(component());</span></span></code></pre> <p>And finally run our build again:</p> <pre><code class="hljs language-bash"><span class="token punctuation">..</span>.\n                          Asset       Size  Chunks             Chunk Names\n   main.ad717f2466ce655fff5c.js  <span class="token number">274</span> bytes       <span class="token number">0</span>  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  main\nvendors.55e79e5927a639d21a1b.js   <span class="token number">69.5</span> KiB       <span class="token number">1</span>  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  vendors\nruntime.725a1a51ede5ae0cfde0.js   <span class="token number">1.42</span> KiB       <span class="token number">2</span>  <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>  runtime\n                     index.html  <span class="token number">353</span> bytes          <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\nEntrypoint main <span class="token operator">=</span> runtime.725a1a51ede5ae0cfde0.js vendors.55e79e5927a639d21a1b.js main.ad717f2466ce655fff5c.js\n<span class="token punctuation">..</span>.</code></pre> <p>We can see that both builds yielded <code>55e79e5927a639d21a1b</code> in the <code>vendor</code> bundle\'s filename.</p> <h2 id="conclusion">Conclusion<a href="#conclusion" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>Caching can be complicated, but the benefit to application or site users makes it worth the effort. See the <em>Further Reading</em> section below to learn more.</p> '}}]);