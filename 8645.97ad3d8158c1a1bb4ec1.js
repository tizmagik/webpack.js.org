(self.webpackChunk=self.webpackChunk||[]).push([[8645],{8645:function(n,s,e){"use strict";e.r(s),s.default='<p>The <code>webpack</code> compiler can understand modules written as ES2015 modules, CommonJS or AMD. However, some third party libraries may expect global dependencies (e.g. <code>$</code> for <code>jQuery</code>). The libraries might also create globals which need to be exported. These "broken modules" are one instance where <em>shimming</em> comes into play.</p> <aside class="warning"><h6 class="warning__prefix">warning</h6><p><strong>We don\'t recommend using globals!</strong> The whole concept behind webpack is to allow more modular front-end development. This means writing isolated modules that are well contained and do not rely on hidden dependencies (e.g. globals). Please use these features only when necessary.</p></aside> <p>Another instance where <em>shimming</em> can be useful is when you want to <a href="https://en.wikipedia.org/wiki/Polyfill_%28programming%29">polyfill</a> browser functionality to support more users. In this case, you may only want to deliver those polyfills to the browsers that need patching (i.e. load them on demand).</p> <p>The following article will walk through both of these use cases.</p> <aside class="tip"><h6 class="tip__prefix">tip</h6><p>For simplicity, this guide stems from the examples in <a href="/guides/getting-started">Getting Started</a>. Please make sure you are familiar with the setup there before moving on.</p></aside> <h2 id="shimming-globals">Shimming Globals<a href="#shimming-globals" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>Let\'s start with the first use case of shimming global variables. Before we do anything let\'s take another look at our project:</p> <p><strong>project</strong></p> <pre><code class="hljs language-diff">webpack-demo\n|- package.json\n|- webpack.config.js\n|- /dist\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> |- index.html\n</span></span>|- /src\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> |- index.js\n</span></span>|- /node_modules</code></pre> <p>Remember that <code>lodash</code> package we were using? For demonstration purposes, let\'s say we wanted to instead provide this as a global throughout our application. To do this, we can use <code>ProvidePlugin</code>.</p> <p>The <a href="/plugins/provide-plugin"><code>ProvidePlugin</code></a> makes a package available as a variable in every module compiled through webpack. If webpack sees that variable used, it will include the given package in the final bundle. Let\'s go ahead by removing the <code>import</code> statement for <code>lodash</code> and instead provide it via the plugin:</p> <p><strong>src/index.js</strong></p> <pre><code class="hljs language-diff"><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">import _ from \'lodash\';\n</span><span class="token prefix deleted">-</span><span class="token line">\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">function component() {\n</span><span class="token prefix unchanged"> </span><span class="token line">  const element = document.createElement(\'div\');\n</span></span>\n<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">  // Lodash, now imported by this script\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  return element;\n</span><span class="token prefix unchanged"> </span><span class="token line">}\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">document.body.appendChild(component());</span></span></code></pre> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">const path = require(\'path\');\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">const webpack = require(\'webpack\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">  entry: \'./src/index.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">  output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    filename: \'main.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">    path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  plugins: [\n</span><span class="token prefix inserted">+</span><span class="token line">    new webpack.ProvidePlugin({\n</span><span class="token prefix inserted">+</span><span class="token line">      _: \'lodash\',\n</span><span class="token prefix inserted">+</span><span class="token line">    }),\n</span><span class="token prefix inserted">+</span><span class="token line">  ],\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">};</span></span></code></pre> <p>What we\'ve essentially done here is tell webpack...</p> <blockquote> <p>If you encounter at least one instance of the variable <code>_</code>, include the <code>lodash</code> package and provide it to the modules that need it.</p> </blockquote> <p>If we run a build, we should still see the same output:</p> <pre><code class="hljs language-bash">$ <span class="token function">npm</span> run build\n\n<span class="token punctuation">..</span>\n\n<span class="token punctuation">[</span>webpack-cli<span class="token punctuation">]</span> Compilation finished\nasset main.js <span class="token number">69.1</span> KiB <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span> <span class="token punctuation">[</span>minimized<span class="token punctuation">]</span> <span class="token punctuation">(</span>name: main<span class="token punctuation">)</span> <span class="token number">1</span> related asset\nruntime modules <span class="token number">344</span> bytes <span class="token number">2</span> modules\ncacheable modules <span class="token number">530</span> KiB\n  ./src/index.js <span class="token number">191</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n  ./node_modules/lodash/lodash.js <span class="token number">530</span> KiB <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\nwebpack <span class="token number">5.4</span>.0 compiled successfully <span class="token keyword">in</span> <span class="token number">2910</span> ms</code></pre> <p>We can also use the <code>ProvidePlugin</code> to expose a single export of a module by configuring it with an "array path" (e.g. <code>[module, child, ...children?]</code>). So let\'s imagine we only wanted to provide the <code>join</code> method from <code>lodash</code> wherever it\'s invoked:</p> <p><strong>src/index.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">function component() {\n</span><span class="token prefix unchanged"> </span><span class="token line">  const element = document.createElement(\'div\');\n</span></span>\n<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">  element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  element.innerHTML = join([\'Hello\', \'webpack\'], \' \');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  return element;\n</span><span class="token prefix unchanged"> </span><span class="token line">}\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">document.body.appendChild(component());</span></span></code></pre> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">const path = require(\'path\');\n</span><span class="token prefix unchanged"> </span><span class="token line">const webpack = require(\'webpack\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">  entry: \'./src/index.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">  output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    filename: \'main.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">    path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">  plugins: [\n</span><span class="token prefix unchanged"> </span><span class="token line">    new webpack.ProvidePlugin({\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">      _: \'lodash\',\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">      join: [\'lodash\', \'join\'],\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">    }),\n</span><span class="token prefix unchanged"> </span><span class="token line">  ],\n</span><span class="token prefix unchanged"> </span><span class="token line">};</span></span></code></pre> <p>This would go nicely with <a href="/guides/tree-shaking">Tree Shaking</a> as the rest of the <code>lodash</code> library should get dropped.</p> <h2 id="granular-shimming">Granular Shimming<a href="#granular-shimming" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>Some legacy modules rely on <code>this</code> being the <code>window</code> object. Let\'s update our <code>index.js</code> so this is the case:</p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">function component() {\n</span><span class="token prefix unchanged"> </span><span class="token line">  const element = document.createElement(\'div\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  element.innerHTML = join([\'Hello\', \'webpack\'], \' \');\n</span></span>\n<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  // Assume we are in the context of `window`\n</span><span class="token prefix inserted">+</span><span class="token line">  this.alert("Hmmm, this probably isn\'t a great idea...");\n</span><span class="token prefix inserted">+</span><span class="token line">\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  return element;\n</span><span class="token prefix unchanged"> </span><span class="token line">}\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">document.body.appendChild(component());</span></span></code></pre> <p>This becomes a problem when the module is executed in a CommonJS context where <code>this</code> is equal to <code>module.exports</code>. In this case you can override <code>this</code> using the <a href="/loaders/imports-loader/"><code>imports-loader</code></a>:</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">const path = require(\'path\');\n</span><span class="token prefix unchanged"> </span><span class="token line">const webpack = require(\'webpack\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">  entry: \'./src/index.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">  output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    filename: \'main.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">    path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  module: {\n</span><span class="token prefix inserted">+</span><span class="token line">    rules: [\n</span><span class="token prefix inserted">+</span><span class="token line">      {\n</span><span class="token prefix inserted">+</span><span class="token line">        test: require.resolve(\'./src/index.js\'),\n</span><span class="token prefix inserted">+</span><span class="token line">        use: \'imports-loader?wrapper=window\',\n</span><span class="token prefix inserted">+</span><span class="token line">      },\n</span><span class="token prefix inserted">+</span><span class="token line">    ],\n</span><span class="token prefix inserted">+</span><span class="token line">  },\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  plugins: [\n</span><span class="token prefix unchanged"> </span><span class="token line">    new webpack.ProvidePlugin({\n</span><span class="token prefix unchanged"> </span><span class="token line">      join: [\'lodash\', \'join\'],\n</span><span class="token prefix unchanged"> </span><span class="token line">    }),\n</span><span class="token prefix unchanged"> </span><span class="token line">  ],\n</span><span class="token prefix unchanged"> </span><span class="token line">};</span></span></code></pre> <h2 id="global-exports">Global Exports<a href="#global-exports" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>Let\'s say a library creates a global variable that it expects its consumers to use. We can add a small module to our setup to demonstrate this:</p> <p><strong>project</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> webpack-demo\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- package.json\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- webpack.config.js\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /dist\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /src\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- index.js\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   |- globals.js\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> |- /node_modules</span></span></code></pre> <p><strong>src/globals.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">const</span> file <span class="token operator">=</span> <span class="token string">\'blah.txt\'</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> helpers <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">test</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'test something\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">parse</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'parse something\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>Now, while you\'d likely never do this in your own source code, you may encounter a dated library you\'d like to use that contains similar code to what\'s shown above. In this case, we can use <a href="/loaders/exports-loader/"><code>exports-loader</code></a>, to export that global variable as a normal module export. For instance, in order to export <code>file</code> as <code>file</code> and <code>helpers.parse</code> as <code>parse</code>:</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">const path = require(\'path\');\n</span><span class="token prefix unchanged"> </span><span class="token line">const webpack = require(\'webpack\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">  entry: \'./src/index.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">  output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    filename: \'main.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">    path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">  module: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    rules: [\n</span><span class="token prefix unchanged"> </span><span class="token line">      {\n</span><span class="token prefix unchanged"> </span><span class="token line">        test: require.resolve(\'./src/index.js\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">        use: \'imports-loader?wrapper=window\',\n</span><span class="token prefix unchanged"> </span><span class="token line">      },\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">      {\n</span><span class="token prefix inserted">+</span><span class="token line">        test: require.resolve(\'./src/globals.js\'),\n</span><span class="token prefix inserted">+</span><span class="token line">        use:\n</span><span class="token prefix inserted">+</span><span class="token line">          \'exports-loader?type=commonjs&#x26;exports=file,multiple|helpers.parse|parse\',\n</span><span class="token prefix inserted">+</span><span class="token line">      },\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">    ],\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">  plugins: [\n</span><span class="token prefix unchanged"> </span><span class="token line">    new webpack.ProvidePlugin({\n</span><span class="token prefix unchanged"> </span><span class="token line">      join: [\'lodash\', \'join\'],\n</span><span class="token prefix unchanged"> </span><span class="token line">    }),\n</span><span class="token prefix unchanged"> </span><span class="token line">  ],\n</span><span class="token prefix unchanged"> </span><span class="token line">};</span></span></code></pre> <p>Now from within our entry script (i.e. <code>src/index.js</code>), we could use <code>const { file, parse } = require(\'./globals.js\');</code> and all should work smoothly.</p> <h2 id="loading-polyfills">Loading Polyfills<a href="#loading-polyfills" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>Almost everything we\'ve discussed thus far has been in relation to handling legacy packages. Let\'s move on to our second topic: <strong>polyfills</strong>.</p> <p>There\'s a lot of ways to load polyfills. For example, to include the <a href="https://babeljs.io/docs/en/babel-polyfill/"><code>babel-polyfill</code></a> we might simply:</p> <pre><code class="hljs language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save babel-polyfill</code></pre> <p>and <code>import</code> it so as to include it in our main bundle:</p> <p><strong>src/index.js</strong></p> <pre><code class="hljs language-diff"><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">import \'babel-polyfill\';\n</span><span class="token prefix inserted">+</span><span class="token line">\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">function component() {\n</span><span class="token prefix unchanged"> </span><span class="token line">  const element = document.createElement(\'div\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  element.innerHTML = join([\'Hello\', \'webpack\'], \' \');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  // Assume we are in the context of `window`\n</span><span class="token prefix unchanged"> </span><span class="token line">  this.alert("Hmmm, this probably isn\'t a great idea...");\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  return element;\n</span><span class="token prefix unchanged"> </span><span class="token line">}\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">document.body.appendChild(component());</span></span></code></pre> <aside class="tip"><h6 class="tip__prefix">tip</h6><p>Note that we aren\'t binding the <code>import</code> to a variable. This is because polyfills simply run on their own, prior to the rest of the code base, allowing us to then assume certain native functionality exists.</p></aside> <p>Note that this approach prioritizes correctness over bundle size. To be safe and robust, polyfills/shims must run <strong>before all other code</strong>, and thus either need to load synchronously, or, all app code needs to load after all polyfills/shims load. There are many misconceptions in the community, as well, that modern browsers "don\'t need" polyfills, or that polyfills/shims merely serve to add missing features - in fact, they often <em>repair broken implementations</em>, even in the most modern of browsers. The best practice thus remains to unconditionally and synchronously load all polyfills/shims, despite the bundle size cost this incurs.</p> <p>If you feel that you have mitigated these concerns and wish to incur the risk of brokenness, here\'s one way you might do it: Let\'s move our <code>import</code> to a new file and add the <a href="https://github.com/github/fetch"><code>whatwg-fetch</code></a> polyfill:</p> <pre><code class="hljs language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save whatwg-fetch</code></pre> <p><strong>src/index.js</strong></p> <pre><code class="hljs language-diff"><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">import \'babel-polyfill\';\n</span><span class="token prefix deleted">-</span><span class="token line">\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">function component() {\n</span><span class="token prefix unchanged"> </span><span class="token line">  const element = document.createElement(\'div\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  element.innerHTML = join([\'Hello\', \'webpack\'], \' \');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  // Assume we are in the context of `window`\n</span><span class="token prefix unchanged"> </span><span class="token line">  this.alert("Hmmm, this probably isn\'t a great idea...");\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  return element;\n</span><span class="token prefix unchanged"> </span><span class="token line">}\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">document.body.appendChild(component());</span></span></code></pre> <p><strong>project</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> webpack-demo\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- package.json\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- webpack.config.js\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /dist\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /src\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- index.js\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- globals.js\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   |- polyfills.js\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> |- /node_modules</span></span></code></pre> <p><strong>src/polyfills.js</strong></p> <pre><code class="hljs language-javascript"><span class="token keyword">import</span> <span class="token string">\'babel-polyfill\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">\'whatwg-fetch\'</span><span class="token punctuation">;</span></code></pre> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">const path = require(\'path\');\n</span><span class="token prefix unchanged"> </span><span class="token line">const webpack = require(\'webpack\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">module.exports = {\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">  entry: \'./src/index.js\',\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  entry: {\n</span><span class="token prefix inserted">+</span><span class="token line">    polyfills: \'./src/polyfills\',\n</span><span class="token prefix inserted">+</span><span class="token line">    index: \'./src/index.js\',\n</span><span class="token prefix inserted">+</span><span class="token line">  },\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  output: {\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">    filename: \'main.js\',\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    filename: \'[name].bundle.js\',\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">    path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">  module: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    rules: [\n</span><span class="token prefix unchanged"> </span><span class="token line">      {\n</span><span class="token prefix unchanged"> </span><span class="token line">        test: require.resolve(\'./src/index.js\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">        use: \'imports-loader?wrapper=window\',\n</span><span class="token prefix unchanged"> </span><span class="token line">      },\n</span><span class="token prefix unchanged"> </span><span class="token line">      {\n</span><span class="token prefix unchanged"> </span><span class="token line">        test: require.resolve(\'./src/globals.js\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">        use:\n</span><span class="token prefix unchanged"> </span><span class="token line">          \'exports-loader?type=commonjs&#x26;exports[]=file&#x26;exports[]=multiple|helpers.parse|parse\',\n</span><span class="token prefix unchanged"> </span><span class="token line">      },\n</span><span class="token prefix unchanged"> </span><span class="token line">    ],\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">  plugins: [\n</span><span class="token prefix unchanged"> </span><span class="token line">    new webpack.ProvidePlugin({\n</span><span class="token prefix unchanged"> </span><span class="token line">      join: [\'lodash\', \'join\'],\n</span><span class="token prefix unchanged"> </span><span class="token line">    }),\n</span><span class="token prefix unchanged"> </span><span class="token line">  ],\n</span><span class="token prefix unchanged"> </span><span class="token line">};</span></span></code></pre> <p>With that in place, we can add the logic to conditionally load our new <code>polyfills.bundle.js</code> file. How you make this decision depends on the technologies and browsers you need to support. We\'ll just do some simple testing to determine whether our polyfills are needed:</p> <p><strong>dist/index.html</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">&#x3C;!DOCTYPE html>\n</span><span class="token prefix unchanged"> </span><span class="token line">&#x3C;html>\n</span><span class="token prefix unchanged"> </span><span class="token line">  &#x3C;head>\n</span><span class="token prefix unchanged"> </span><span class="token line">    &#x3C;meta charset="utf-8" />\n</span><span class="token prefix unchanged"> </span><span class="token line">    &#x3C;title>Getting Started&#x3C;/title>\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    &#x3C;script>\n</span><span class="token prefix inserted">+</span><span class="token line">      const modernBrowser = \'fetch\' in window &#x26;&#x26; \'assign\' in Object;\n</span><span class="token prefix inserted">+</span><span class="token line">\n</span><span class="token prefix inserted">+</span><span class="token line">      if (!modernBrowser) {\n</span><span class="token prefix inserted">+</span><span class="token line">        const scriptElement = document.createElement(\'script\');\n</span><span class="token prefix inserted">+</span><span class="token line">\n</span><span class="token prefix inserted">+</span><span class="token line">        scriptElement.async = false;\n</span><span class="token prefix inserted">+</span><span class="token line">        scriptElement.src = \'/polyfills.bundle.js\';\n</span><span class="token prefix inserted">+</span><span class="token line">        document.head.appendChild(scriptElement);\n</span><span class="token prefix inserted">+</span><span class="token line">      }\n</span><span class="token prefix inserted">+</span><span class="token line">    &#x3C;/script>\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  &#x3C;/head>\n</span><span class="token prefix unchanged"> </span><span class="token line">  &#x3C;body>\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">    &#x3C;script src="main.js">&#x3C;/script>\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    &#x3C;script src="index.bundle.js">&#x3C;/script>\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  &#x3C;/body>\n</span><span class="token prefix unchanged"> </span><span class="token line">&#x3C;/html></span></span></code></pre> <p>Now we can <code>fetch</code> some data within our entry script:</p> <p><strong>src/index.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">function component() {\n</span><span class="token prefix unchanged"> </span><span class="token line">  const element = document.createElement(\'div\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  element.innerHTML = join([\'Hello\', \'webpack\'], \' \');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  // Assume we are in the context of `window`\n</span><span class="token prefix unchanged"> </span><span class="token line">  this.alert("Hmmm, this probably isn\'t a great idea...");\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  return element;\n</span><span class="token prefix unchanged"> </span><span class="token line">}\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">document.body.appendChild(component());\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">\n</span><span class="token prefix inserted">+</span><span class="token line">fetch(\'https://jsonplaceholder.typicode.com/users\')\n</span><span class="token prefix inserted">+</span><span class="token line">  .then((response) => response.json())\n</span><span class="token prefix inserted">+</span><span class="token line">  .then((json) => {\n</span><span class="token prefix inserted">+</span><span class="token line">    console.log(\n</span><span class="token prefix inserted">+</span><span class="token line">      "We retrieved some data! AND we\'re confident it will work on a variety of browser distributions."\n</span><span class="token prefix inserted">+</span><span class="token line">    );\n</span><span class="token prefix inserted">+</span><span class="token line">    console.log(json);\n</span><span class="token prefix inserted">+</span><span class="token line">  })\n</span><span class="token prefix inserted">+</span><span class="token line">  .catch((error) =>\n</span><span class="token prefix inserted">+</span><span class="token line">    console.error(\'Something went wrong when fetching this data: \', error)\n</span><span class="token prefix inserted">+</span><span class="token line">  );</span></span></code></pre> <p>If we run our build, another <code>polyfills.bundle.js</code> file will be emitted and everything should still run smoothly in the browser. Note that this set up could likely be improved upon but it should give you a good idea of how you can provide polyfills only to the users that actually need them.</p> <h2 id="further-optimizations">Further Optimizations<a href="#further-optimizations" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>The <code>babel-preset-env</code> package uses <a href="https://github.com/browserslist/browserslist">browserslist</a> to transpile only what is not supported in your browsers matrix. This preset comes with the <a href="https://babeljs.io/docs/en/babel-preset-env#usebuiltins"><code>useBuiltIns</code></a> option, <code>false</code> by default, which converts your global <code>babel-polyfill</code> import to a more granular feature by feature <code>import</code> pattern:</p> <pre><code class="hljs language-js"><span class="token keyword">import</span> <span class="token string">\'core-js/modules/es7.string.pad-start\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">\'core-js/modules/es7.string.pad-end\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">\'core-js/modules/web.timers\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">\'core-js/modules/web.immediate\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">\'core-js/modules/web.dom.iterable\'</span><span class="token punctuation">;</span></code></pre> <p>See <a href="https://babeljs.io/docs/en/babel-preset-env">the babel-preset-env documentation</a> for more information.</p> <h2 id="node-built-ins">Node Built-Ins<a href="#node-built-ins" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>Node built-ins, like <code>process</code>, can be polyfilled right directly from your configuration file without the use of any special loaders or plugins. See the <a href="/configuration/node">node configuration page</a> for more information and examples.</p> <h2 id="other-utilities">Other Utilities<a href="#other-utilities" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>There are a few other tools that can help when dealing with legacy modules.</p> <p>When there is no AMD/CommonJS version of the module and you want to include the <code>dist</code>, you can flag this module in <a href="/configuration/module/#modulenoparse"><code>noParse</code></a>. This will cause webpack to include the module without parsing it or resolving <code>require()</code> and <code>import</code> statements. This practice is also used to improve the build performance.</p> <aside class="warning"><h6 class="warning__prefix">warning</h6><p>Any feature requiring the AST, like the <code>ProvidePlugin</code>, will not work.</p></aside> <p>Lastly, there are some modules that support multiple <a href="/concepts/modules">module styles</a>; e.g. a combination of AMD, CommonJS, and legacy. In most of these cases, they first check for <code>define</code> and then use some quirky code to export properties. In these cases, it could help to force the CommonJS path by setting <code>additionalCode=var%define%20=%20false;</code> via the <a href="/loaders/imports-loader/"><code>imports-loader</code></a>.</p> '}}]);