(self.webpackChunk=self.webpackChunk||[]).push([[1387],{1387:function(n,e,s){"use strict";s.r(e),e.default='<p>webpack can compile for multiple environments or <em>targets</em>. To understand what a <code>target</code> is in detail, read through <a href="/concepts/targets/">the targets concept page</a>.</p> <h2 id="target"><code>target</code><a href="#target" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string</code> <code>[string]</code> <code>false</code></p> <p>Instructs webpack to target a specific environment. Defaults to <code>\'browserslist\'</code> or to <code>\'web\'</code> when no browserslist configuration was found.</p> <h3 id="string"><code>string</code><a href="#string" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>The following string values are supported via <a href="https://github.com/webpack/webpack/blob/master/lib/WebpackOptionsApply.js"><code>WebpackOptionsApply</code></a>:</p> <table> <thead> <tr> <th>Option</th> <th>Description</th> </tr> </thead> <tbody> <tr> <td data-th="Option"><span><code>async-node[[X].Y]</code></span></td> <td data-th="Description"><span>Compile for usage in a Node.js-like environment (uses <code>fs</code> and <code>vm</code> to load chunks asynchronously)</span></td> </tr> <tr> <td data-th="Option"><span><code>electron[[X].Y]-main</code></span></td> <td data-th="Description"><span>Compile for <a href="https://electronjs.org/">Electron</a> for main process.</span></td> </tr> <tr> <td data-th="Option"><span><code>electron[[X].Y]-renderer</code></span></td> <td data-th="Description"><span>Compile for <a href="https://electronjs.org/">Electron</a> for renderer process, providing a target using <code>JsonpTemplatePlugin</code>, <code>FunctionModulePlugin</code> for browser environments and <code>NodeTargetPlugin</code> and <code>ExternalsPlugin</code> for CommonJS and Electron built-in modules.</span></td> </tr> <tr> <td data-th="Option"><span><code>electron[[X].Y]-preload</code></span></td> <td data-th="Description"><span>Compile for <a href="https://electronjs.org/">Electron</a> for renderer process, providing a target using <code>NodeTemplatePlugin</code> with <code>asyncChunkLoading</code> set to <code>true</code>, <code>FunctionModulePlugin</code> for browser environments and <code>NodeTargetPlugin</code> and <code>ExternalsPlugin</code> for CommonJS and Electron built-in modules.</span></td> </tr> <tr> <td data-th="Option"><span><code>node[[X].Y]</code></span></td> <td data-th="Description"><span>Compile for usage in a Node.js-like environment (uses Node.js <code>require</code> to load chunks)</span></td> </tr> <tr> <td data-th="Option"><span><code>node-webkit[[X].Y]</code></span></td> <td data-th="Description"><span>Compile for usage in WebKit and uses JSONP for chunk loading. Allows importing of built-in Node.js modules and <a href="http://docs.nwjs.io/en/latest/"><code>nw.gui</code></a> (experimental)</span></td> </tr> <tr> <td data-th="Option"><span><code>nwjs[[X].Y]</code></span></td> <td data-th="Description"><span>The same as <code>node-webkit</code></span></td> </tr> <tr> <td data-th="Option"><span><code>web</code></span></td> <td data-th="Description"><span>Compile for usage in a browser-like environment <strong>(default)</strong></span></td> </tr> <tr> <td data-th="Option"><span><code>webworker</code></span></td> <td data-th="Description"><span>Compile as WebWorker</span></td> </tr> <tr> <td data-th="Option"><span><code>esX</code></span></td> <td data-th="Description"><span>Compile for specified ECMAScript version. Examples: es5, es2020.</span></td> </tr> <tr> <td data-th="Option"><span><code>browserslist</code></span></td> <td data-th="Description"><span>Infer a platform and the ES-features from a browserslist-config <strong>(default if browserslist config is available)</strong></span></td> </tr> </tbody> </table> <p>For example, when the <code>target</code> is set to <code>"electron-main"</code>, webpack includes multiple electron specific variables.</p> <p>A version of <code>node</code> or <code>electron</code> may be optionally specified. This is denoted by the <code>[[X].Y]</code> in the table above.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  target<span class="token operator">:</span> <span class="token string">\'node12.18\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>It helps determinate ES-features that may be used to generate a runtime-code (all the chunks and modules are wrapped by runtime code).</p> <h4 id="browserslist"><code>browserslist</code><a href="#browserslist" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>If a project has a browserslist config, then webpack will use it for:</p> <ul> <li>Determinate ES-features that may be used to generate a runtime-code.</li> <li>Infer an environment (e.g: <code>last 2 node versions</code> the same as <code>target: "node"</code> with some <a href="/configuration/output/#outputenvironment"><code>output.environment</code></a> settings).</li> </ul> <p>Supported browserslist values:</p> <ul> <li><code>browserslist</code> - use automatically resolved browserslist config and environment (from the nearest <code>package.json</code> or <code>BROWSERSLIST</code> environment variable, see <a href="https://github.com/browserslist/browserslist#queries">browserslist documentation</a> for details)</li> <li><code>browserslist:modern</code> - use <code>modern</code> environment from automatically resolved browserslist config</li> <li><code>browserslist:last 2 versions</code> - use an explicit browserslist query (config will be ignored)</li> <li><code>browserslist:/path/to/config</code> - explicitly specify browserslist config</li> <li><code>browserslist:/path/to/config:modern</code> - explicitly specify browserslist config and an environment</li> </ul> <h3 id="string-1"><code>[string]</code><a href="#string-1" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>When multiple targets are passed, then common subset of features will be used:</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  target<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'web\'</span><span class="token punctuation">,</span> <span class="token string">\'es5\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>webpack will generate a runtime code for web platform and will use only ES5 features.</p> <p>Not all targets may be mixed for now.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  target<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'web\'</span><span class="token punctuation">,</span> <span class="token string">\'node\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>Will cause an error. webpack does not support universal target for now.</p> <h3 id="false"><code>false</code><a href="#false" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>Set <code>target</code> to <code>false</code> if none of the predefined targets from the list above meet your needs, no plugins will be applied.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  target<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>Or you can apply specific plugins you want:</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  target<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>web<span class="token punctuation">.</span>JsonpTemplatePlugin</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>LoaderTargetPlugin</span><span class="token punctuation">(</span><span class="token string">\'web\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>When no information about the target or the <a href="/configuration/output/#outputenvironment">environment</a> features is provided, then ES2015 will be used.</p> '}}]);