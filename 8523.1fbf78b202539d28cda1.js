(self.webpackChunk=self.webpackChunk||[]).push([[8523],{2307:function(e,o,n){"use strict";n.r(o),o.default='<p>The following Node.js options configure whether to polyfill or mock certain <a href="https://nodejs.org/docs/latest/api/globals.html">Node.js globals</a>.</p> <p>This feature is provided by webpack\'s internal <a href="https://github.com/webpack/webpack/blob/master/lib/NodeStuffPlugin.js"><code>NodeStuffPlugin</code></a> plugin.</p> <aside class="warning"><h6 class="warning__prefix">warning</h6><p>As of webpack 5, You can configure only <code>global</code>, <code>__filename</code> or <code>__dirname</code> under <code>node</code> option. If you\'re looking for how to polyfill <code>fs</code> alike in Node.js under webpack 5, please check <a href="/configuration/resolve/#resolvefallback">resolve.fallback</a> for help.</p></aside> <h2 id="node"><code>node</code><a href="#node" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean: false</code> <code>object</code></p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  node<span class="token operator">:</span> <span class="token punctuation">{</span>\n    global<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    __filename<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    __dirname<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>Since webpack 3.0.0, the <code>node</code> option may be set to <code>false</code> to completely turn off the <code>NodeStuffPlugin</code> plugin.</p> <h2 id="nodeglobal"><code>node.global</code><a href="#nodeglobal" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean</code></p> <aside class="tip"><h6 class="tip__prefix">tip</h6><p>If you are using a module which needs global variables in it, use <code>ProvidePlugin</code> instead of <code>global</code>.</p></aside> <p>See <a href="https://nodejs.org/api/globals.html#globals_global">the Node.js documentation</a> for the exact behavior of this object.</p> <p>Options:</p> <ul> <li><code>true</code>: Provide a polyfill.</li> <li><code>false</code>: Provide nothing. Code that expects this object may crash with a <code>ReferenceError</code>.</li> </ul> <h2 id="node__filename"><code>node.__filename</code><a href="#node__filename" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean</code> <code>string: \'mock\' | \'eval-only\'</code></p> <p>Options:</p> <ul> <li><code>true</code>: The filename of the <strong>input</strong> file relative to the <a href="/configuration/entry-context/#context"><code>context</code> option</a>.</li> <li><code>false</code>: Webpack won\'t touch your <code>__filename</code> code, which means you have the regular Node.js <code>__filename</code> behavior. The filename of the <strong>output</strong> file when run in a Node.js environment.</li> <li><code>\'mock\'</code>: The fixed value <code>\'/index.js\'</code>.</li> <li><code>\'eval-only\'</code></li> </ul> <h2 id="node__dirname"><code>node.__dirname</code><a href="#node__dirname" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean</code> <code>string: \'mock\' | \'eval-only\'</code></p> <p>Options:</p> <ul> <li><code>true</code>: The dirname of the <strong>input</strong> file relative to the <a href="/configuration/entry-context/#context"><code>context</code> option</a>.</li> <li><code>false</code>: Webpack won\'t touch your <code>__dirname</code> code, which means you have the regular Node.js <code>__dirname</code> behavior. The dirname of the <strong>output</strong> file when run in a Node.js environment.</li> <li><code>\'mock\'</code>: The fixed value <code>\'/\'</code>.</li> <li><code>\'eval-only\'</code></li> </ul> '}}]);