(self.webpackChunk=self.webpackChunk||[]).push([[8490],{8490:function(n,s,a){"use strict";a.r(s),s.default='<p>webpack is used to compile JavaScript modules. Once <a href="/guides/installation">installed</a>, you can interact with webpack either from its <a href="/api/cli">CLI</a> or <a href="/api/node">API</a>. If you\'re still new to webpack, please read through the <a href="/concepts">core concepts</a> and <a href="/comparison">this comparison</a> to learn why you might use it over the other tools that are out in the community.</p> <aside class="warning"><h6 class="warning__prefix">warning</h6><p>The minimum supported Node.js version to run webpack 5 is 10.13.0 (LTS)</p></aside> <h2 id="basic-setup">Basic Setup<a href="#basic-setup" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>First let\'s create a directory, initialize npm, <a href="/guides/installation/#local-installation">install webpack locally</a>, and install the <a href="https://github.com/webpack/webpack-cli"><code>webpack-cli</code></a> (the tool used to run webpack on the command line):</p> <pre><code class="hljs language-bash"><span class="token function">mkdir</span> webpack-demo\n<span class="token builtin class-name">cd</span> webpack-demo\n<span class="token function">npm</span> init -y\n<span class="token function">npm</span> <span class="token function">install</span> webpack webpack-cli --save-dev</code></pre> <p>Throughout the Guides we will use <strong><code>diff</code></strong> blocks to show you what changes we\'re making to directories, files, and code. For instance:</p> <pre><code class="hljs language-diff"><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> this is a new line you shall copy into your code\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> and this is a line to be removed from your code\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> and this is a line not to touch.</span></span></code></pre> <p>Now we\'ll create the following directory structure, files and their contents:</p> <p><strong>project</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> webpack-demo\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- package.json\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> |- index.html\n</span><span class="token prefix inserted">+</span><span class="token line"> |- /src\n</span><span class="token prefix inserted">+</span><span class="token line">   |- index.js</span></span></code></pre> <p><strong>src/index.js</strong></p> <pre><code class="hljs language-javascript"><span class="token keyword">function</span> <span class="token function">component</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">\'div\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Lodash, currently included via a script, is required for this line to work</span>\n  element<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'Hello\'</span><span class="token punctuation">,</span> <span class="token string">\'webpack\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">\' \'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> element<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\ndocument<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p><strong>index.html</strong></p> <pre><code class="hljs language-html"><span class="token doctype"><span class="token punctuation">&#x3C;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>html</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>head</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>title</span><span class="token punctuation">></span></span>Getting Started<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>title</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://unpkg.com/lodash@4.17.20<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>script</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>head</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>body</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./src/index.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>script</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>html</span><span class="token punctuation">></span></span></code></pre> <p>We also need to adjust our <code>package.json</code> file in order to make sure we mark our package as <code>private</code>, as well as removing the <code>main</code> entry. This is to prevent an accidental publish of your code.</p> <aside class="tip"><h6 class="tip__prefix">tip</h6><p>If you want to learn more about the inner workings of <code>package.json</code>, then we recommend reading the <a href="https://docs.npmjs.com/files/package.json">npm documentation</a>.</p></aside> <p><strong>package.json</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">{\n</span><span class="token prefix unchanged"> </span><span class="token line">  "name": "webpack-demo",\n</span><span class="token prefix unchanged"> </span><span class="token line">  "version": "1.0.0",\n</span><span class="token prefix unchanged"> </span><span class="token line">  "description": "",\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">  "main": "index.js",\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  "private": true,\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  "scripts": {\n</span><span class="token prefix unchanged"> </span><span class="token line">    "test": "echo \\"Error: no test specified\\" &#x26;&#x26; exit 1"\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">  "keywords": [],\n</span><span class="token prefix unchanged"> </span><span class="token line">  "author": "",\n</span><span class="token prefix unchanged"> </span><span class="token line">  "license": "ISC",\n</span><span class="token prefix unchanged"> </span><span class="token line">  "devDependencies": {\n</span><span class="token prefix unchanged"> </span><span class="token line">    "webpack": "^5.4.0",\n</span><span class="token prefix unchanged"> </span><span class="token line">    "webpack-cli": "^4.2.0"\n</span><span class="token prefix unchanged"> </span><span class="token line">  }\n</span><span class="token prefix unchanged"> </span><span class="token line">}</span></span></code></pre> <p>In this example, there are implicit dependencies between the <code>&#x3C;script></code> tags. Our <code>index.js</code> file depends on <code>lodash</code> being included in the page before it runs. This is because <code>index.js</code> never explicitly declared a need for <code>lodash</code>; it just assumes that the global variable <code>_</code> exists.</p> <p>There are problems with managing JavaScript projects this way:</p> <ul> <li>It is not immediately apparent that the script depends on an external library.</li> <li>If a dependency is missing, or included in the wrong order, the application will not function properly.</li> <li>If a dependency is included but not used, the browser will be forced to download unnecessary code.</li> </ul> <p>Let\'s use webpack to manage these scripts instead.</p> <h2 id="creating-a-bundle">Creating a Bundle<a href="#creating-a-bundle" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>First we\'ll tweak our directory structure slightly, separating the "source" code (<code>./src</code>) from our "distribution" code (<code>./dist</code>). The "source" code is the code that we\'ll write and edit. The "distribution" code is the minimized and optimized <code>output</code> of our build process that will eventually be loaded in the browser. Tweak the directory structure as follows:</p> <p><strong>project</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> webpack-demo\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- package.json\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> |- /dist\n</span><span class="token prefix inserted">+</span><span class="token line">   |- index.html\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> |- index.html\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> |- /src\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- index.js</span></span></code></pre> <aside class="tip"><h6 class="tip__prefix">tip</h6><p>You may have noticed that <code>index.html</code> was created manually, even though it is now placed in the <code>dist</code> directory. Later on in this guide, we will generate <code>index.html</code> rather than edit it manually. Once this is done, it should be safe to empty the <code>dist</code> directory and to regenerate all the files within it.</p></aside> <p>To bundle the <code>lodash</code> dependency with <code>index.js</code>, we\'ll need to install the library locally:</p> <pre><code class="hljs language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save lodash</code></pre> <aside class="tip"><h6 class="tip__prefix">tip</h6><p>When installing a package that will be bundled into your production bundle, you should use <code>npm install --save</code>. If you\'re installing a package for development purposes (e.g. a linter, testing libraries, etc.) then you should use <code>npm install --save-dev</code>. More information can be found in the <a href="https://docs.npmjs.com/cli/install">npm documentation</a>.</p></aside> <p>Now, let\'s import <code>lodash</code> in our script:</p> <p><strong>src/index.js</strong></p> <pre><code class="hljs language-diff"><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">import _ from \'lodash\';\n</span><span class="token prefix inserted">+</span><span class="token line">\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">function component() {\n</span><span class="token prefix unchanged"> </span><span class="token line">  const element = document.createElement(\'div\');\n</span></span>\n<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">  // Lodash, currently included via a script, is required for this line to work\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  // Lodash, now imported by this script\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  return element;\n</span><span class="token prefix unchanged"> </span><span class="token line">}\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">document.body.appendChild(component());</span></span></code></pre> <p>Now, since we\'ll be bundling our scripts, we have to update our <code>index.html</code> file. Let\'s remove the lodash <code>&#x3C;script></code>, as we now <code>import</code> it, and modify the other <code>&#x3C;script></code> tag to load the bundle, instead of the raw <code>./src</code> file:</p> <p><strong>dist/index.html</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">&#x3C;!DOCTYPE html>\n</span><span class="token prefix unchanged"> </span><span class="token line">&#x3C;html>\n</span><span class="token prefix unchanged"> </span><span class="token line">  &#x3C;head>\n</span><span class="token prefix unchanged"> </span><span class="token line">    &#x3C;meta charset="utf-8" />\n</span><span class="token prefix unchanged"> </span><span class="token line">    &#x3C;title>Getting Started&#x3C;/title>\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">    &#x3C;script src="https://unpkg.com/lodash@4.17.20">&#x3C;/script>\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  &#x3C;/head>\n</span><span class="token prefix unchanged"> </span><span class="token line">  &#x3C;body>\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">    &#x3C;script src="./src/index.js">&#x3C;/script>\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    &#x3C;script src="main.js">&#x3C;/script>\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  &#x3C;/body>\n</span><span class="token prefix unchanged"> </span><span class="token line">&#x3C;/html></span></span></code></pre> <p>In this setup, <code>index.js</code> explicitly requires <code>lodash</code> to be present, and binds it as <code>_</code> (no global scope pollution). By stating what dependencies a module needs, webpack can use this information to build a dependency graph. It then uses the graph to generate an optimized bundle where scripts will be executed in the correct order.</p> <p>With that said, let\'s run <code>npx webpack</code>, which will take our script at <code>src/index.js</code> as the <a href="/concepts/entry-points">entry point</a>, and will generate <code>dist/main.js</code> as the <a href="/concepts/output">output</a>. The <code>npx</code> command, which ships with Node 8.2/npm 5.2.0 or higher, runs the webpack binary (<code>./node_modules/.bin/webpack</code>) of the webpack package we installed in the beginning:</p> <pre><code class="hljs language-bash">$ npx webpack\n<span class="token punctuation">[</span>webpack-cli<span class="token punctuation">]</span> Compilation finished\nasset main.js <span class="token number">69.3</span> KiB <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span> <span class="token punctuation">[</span>minimized<span class="token punctuation">]</span> <span class="token punctuation">(</span>name: main<span class="token punctuation">)</span> <span class="token number">1</span> related asset\nruntime modules <span class="token number">1000</span> bytes <span class="token number">5</span> modules\ncacheable modules <span class="token number">530</span> KiB\n  ./src/index.js <span class="token number">257</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n  ./node_modules/lodash/lodash.js <span class="token number">530</span> KiB <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\nwebpack <span class="token number">5.4</span>.0 compiled successfully <span class="token keyword">in</span> <span class="token number">1851</span> ms</code></pre> <aside class="tip"><h6 class="tip__prefix">tip</h6><p>Your output may vary a bit, but if the build is successful then you are good to go.</p></aside> <p>Open <code>index.html</code> from the <code>dist</code> directory in your browser and, if everything went right, you should see the following text: <code>\'Hello webpack\'</code>.</p> <h2 id="modules">Modules<a href="#modules" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>The <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import"><code>import</code></a> and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export"><code>export</code></a> statements have been standardized in <a href="https://babeljs.io/docs/en/learn/">ES2015</a>. They are supported in most of the browsers at this moment, however there are some browsers that don\'t recognize the new syntax. But don\'t worry, webpack does support them out of the box.</p> <p>Behind the scenes, webpack actually "<strong>transpiles</strong>" the code so that older browsers can also run it. If you inspect <code>dist/main.js</code>, you might be able to see how webpack does this, it\'s quite ingenious! Besides <code>import</code> and <code>export</code>, webpack supports various other module syntaxes as well, see <a href="/api/module-methods">Module API</a> for more information.</p> <p>Note that webpack will not alter any code other than <code>import</code> and <code>export</code> statements. If you are using other <a href="http://es6-features.org/">ES2015 features</a>, make sure to <a href="/loaders/#transpiling">use a transpiler</a> such as <a href="https://babeljs.io/">Babel</a> or <a href="https://buble.surge.sh/guide/">Bublé</a> via webpack\'s <a href="/concepts/loaders/">loader system</a>.</p> <h2 id="using-a-configuration">Using a Configuration<a href="#using-a-configuration" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>As of version 4, webpack doesn\'t require any configuration, but most projects will need a more complex setup, which is why webpack supports a <a href="/concepts/configuration">configuration file</a>. This is much more efficient than having to manually type in a lot of commands in the terminal, so let\'s create one:</p> <p><strong>project</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> webpack-demo\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- package.json\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> |- webpack.config.js\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> |- /dist\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- index.html\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /src\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- index.js</span></span></code></pre> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token operator">:</span> <span class="token string">\'./src/index.js\'</span><span class="token punctuation">,</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    filename<span class="token operator">:</span> <span class="token string">\'main.js\'</span><span class="token punctuation">,</span>\n    path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dist\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>Now, let\'s run the build again but instead using our new configuration file:</p> <pre><code class="hljs language-bash">$ npx webpack --config webpack.config.js\n<span class="token punctuation">[</span>webpack-cli<span class="token punctuation">]</span> Compilation finished\nasset main.js <span class="token number">69.3</span> KiB <span class="token punctuation">[</span>compared <span class="token keyword">for</span> emit<span class="token punctuation">]</span> <span class="token punctuation">[</span>minimized<span class="token punctuation">]</span> <span class="token punctuation">(</span>name: main<span class="token punctuation">)</span> <span class="token number">1</span> related asset\nruntime modules <span class="token number">1000</span> bytes <span class="token number">5</span> modules\ncacheable modules <span class="token number">530</span> KiB\n  ./src/index.js <span class="token number">257</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n  ./node_modules/lodash/lodash.js <span class="token number">530</span> KiB <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\nwebpack <span class="token number">5.4</span>.0 compiled successfully <span class="token keyword">in</span> <span class="token number">1934</span> ms</code></pre> <aside class="tip"><h6 class="tip__prefix">tip</h6><p>If a <code>webpack.config.js</code> is present, the <code>webpack</code> command picks it up by default. We use the <code>--config</code> option here only to show that you can pass a configuration of any name. This will be useful for more complex configurations that need to be split into multiple files.</p></aside> <p>A configuration file allows far more flexibility than simple CLI usage. We can specify loader rules, plugins, resolve options and many other enhancements this way. See the <a href="/configuration">configuration documentation</a> to learn more.</p> <h2 id="npm-scripts">NPM Scripts<a href="#npm-scripts" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>Given it\'s not particularly fun to run a local copy of webpack from the CLI, we can set up a little shortcut. Let\'s adjust our <em>package.json</em> by adding an <a href="https://docs.npmjs.com/misc/scripts">npm script</a>:</p> <p><strong>package.json</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">{\n</span><span class="token prefix unchanged"> </span><span class="token line">  "name": "webpack-demo",\n</span><span class="token prefix unchanged"> </span><span class="token line">  "version": "1.0.0",\n</span><span class="token prefix unchanged"> </span><span class="token line">  "description": "",\n</span><span class="token prefix unchanged"> </span><span class="token line">  "private": true,\n</span><span class="token prefix unchanged"> </span><span class="token line">  "scripts": {\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">    "test": "echo \\"Error: no test specified\\" &#x26;&#x26; exit 1"\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    "test": "echo \\"Error: no test specified\\" &#x26;&#x26; exit 1",\n</span><span class="token prefix inserted">+</span><span class="token line">    "build": "webpack"\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">  "keywords": [],\n</span><span class="token prefix unchanged"> </span><span class="token line">  "author": "",\n</span><span class="token prefix unchanged"> </span><span class="token line">  "license": "ISC",\n</span><span class="token prefix unchanged"> </span><span class="token line">  "devDependencies": {\n</span><span class="token prefix unchanged"> </span><span class="token line">    "webpack": "^5.4.0",\n</span><span class="token prefix unchanged"> </span><span class="token line">    "webpack-cli": "^4.2.0"\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">  "dependencies": {\n</span><span class="token prefix unchanged"> </span><span class="token line">    "lodash": "^4.17.20"\n</span><span class="token prefix unchanged"> </span><span class="token line">  }\n</span><span class="token prefix unchanged"> </span><span class="token line">}</span></span></code></pre> <p>Now the <code>npm run build</code> command can be used in place of the <code>npx</code> command we used earlier. Note that within <code>scripts</code> we can reference locally installed npm packages by name the same way we did with <code>npx</code>. This convention is the standard in most npm-based projects because it allows all contributors to use the same set of common scripts.</p> <p>Now run the following command and see if your script alias works:</p> <pre><code class="hljs language-bash">$ <span class="token function">npm</span> run build\n\n<span class="token punctuation">..</span>.\n\n<span class="token punctuation">[</span>webpack-cli<span class="token punctuation">]</span> Compilation finished\nasset main.js <span class="token number">69.3</span> KiB <span class="token punctuation">[</span>compared <span class="token keyword">for</span> emit<span class="token punctuation">]</span> <span class="token punctuation">[</span>minimized<span class="token punctuation">]</span> <span class="token punctuation">(</span>name: main<span class="token punctuation">)</span> <span class="token number">1</span> related asset\nruntime modules <span class="token number">1000</span> bytes <span class="token number">5</span> modules\ncacheable modules <span class="token number">530</span> KiB\n  ./src/index.js <span class="token number">257</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n  ./node_modules/lodash/lodash.js <span class="token number">530</span> KiB <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\nwebpack <span class="token number">5.4</span>.0 compiled successfully <span class="token keyword">in</span> <span class="token number">1940</span> ms</code></pre> <aside class="tip"><h6 class="tip__prefix">tip</h6><p>Custom parameters can be passed to webpack by adding two dashes between the <code>npm run build</code> command and your parameters, e.g. <code>npm run build -- --color</code>.</p></aside> <h2 id="conclusion">Conclusion<a href="#conclusion" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>Now that you have a basic build together you should move on to the next guide <a href="/guides/asset-management"><code>Asset Management</code></a> to learn how to manage assets like images and fonts with webpack. At this point, your project should look like this:</p> <p><strong>project</strong></p> <pre><code class="hljs language-diff">webpack-demo\n|- package.json\n|- webpack.config.js\n|- /dist\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> |- main.js\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- index.html\n</span></span>|- /src\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> |- index.js\n</span></span>|- /node_modules</code></pre> <aside class="tip"><h6 class="tip__prefix">tip</h6><p>If you\'re using npm 5+, you\'ll probably also see a <code>package-lock.json</code> file in your directory.</p></aside> <aside class="warning"><h6 class="warning__prefix">warning</h6><p>Do not compile untrusted code with webpack. It could lead to execution of malicious code on your computer, remote servers, or in the Web browsers of the end users of your application.</p></aside> <p>If you want to learn more about webpack\'s design, you can check out the <a href="/concepts">basic concepts</a> and <a href="/configuration">configuration</a> pages. Furthermore, the <a href="/api">API</a> section digs into the various interfaces webpack offers.</p> '}}]);