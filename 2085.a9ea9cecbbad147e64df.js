(self.webpackChunk=self.webpackChunk||[]).push([[2085],{2085:function(n,s,e){"use strict";e.r(s),s.default='<aside class="tip"><h6 class="tip__prefix">tip</h6><p>This guide extends the example provided in <a href="/guides/getting-started">Getting Started</a>. Please make sure you are at least familiar with the example provided there and the <a href="/guides/output-management/">Output Management</a> chapter.</p></aside> <p>Code splitting is one of the most compelling features of webpack. This feature allows you to split your code into various bundles which can then be loaded on demand or in parallel. It can be used to achieve smaller bundles and control resource load prioritization which, if used correctly, can have a major impact on load time.</p> <p>There are three general approaches to code splitting available:</p> <ul> <li><strong>Entry Points</strong>: Manually split code using <a href="/configuration/entry-context"><code>entry</code></a> configuration.</li> <li><strong>Prevent Duplication</strong>: Use <a href="/configuration/entry-context/#dependencies">Entry dependencies</a> or <a href="/plugins/split-chunks-plugin/"><code>SplitChunksPlugin</code></a> to dedupe and split chunks.</li> <li><strong>Dynamic Imports</strong>: Split code via inline function calls within modules.</li> </ul> <h2 id="entry-points">Entry Points<a href="#entry-points" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>This is by far the easiest and most intuitive way to split code. However, it is more manual and has some pitfalls we will go over. Let\'s take a look at how we might split another module from the main bundle:</p> <p><strong>project</strong></p> <pre><code class="hljs language-diff">webpack-demo\n|- package.json\n|- webpack.config.js\n|- /dist\n|- /src\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> |- index.js\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> |- another-module.js\n</span></span>|- /node_modules</code></pre> <p><strong>another-module.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">import</span> _ <span class="token keyword">from</span> <span class="token string">\'lodash\'</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'Another\'</span><span class="token punctuation">,</span> <span class="token string">\'module\'</span><span class="token punctuation">,</span> <span class="token string">\'loaded!\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">\' \'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">const path = require(\'path\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">module.exports = {\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">  entry: \'./src/index.js\',\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  mode: \'development\',\n</span><span class="token prefix inserted">+</span><span class="token line">  entry: {\n</span><span class="token prefix inserted">+</span><span class="token line">    index: \'./src/index.js\',\n</span><span class="token prefix inserted">+</span><span class="token line">    another: \'./src/another-module.js\',\n</span><span class="token prefix inserted">+</span><span class="token line">  },\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  output: {\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">    filename: \'main.js\',\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    filename: \'[name].bundle.js\',\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">    path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">};</span></span></code></pre> <p>This will yield the following build result:</p> <pre><code class="hljs language-bash"><span class="token punctuation">..</span>.\n<span class="token punctuation">[</span>webpack-cli<span class="token punctuation">]</span> Compilation finished\nasset index.bundle.js <span class="token number">553</span> KiB <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span> <span class="token punctuation">(</span>name: index<span class="token punctuation">)</span>\nasset another.bundle.js <span class="token number">553</span> KiB <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span> <span class="token punctuation">(</span>name: another<span class="token punctuation">)</span>\nruntime modules <span class="token number">2.49</span> KiB <span class="token number">12</span> modules\ncacheable modules <span class="token number">530</span> KiB\n  ./src/index.js <span class="token number">257</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n  ./src/another-module.js <span class="token number">84</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n  ./node_modules/lodash/lodash.js <span class="token number">530</span> KiB <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\nwebpack <span class="token number">5.4</span>.0 compiled successfully <span class="token keyword">in</span> <span class="token number">245</span> ms</code></pre> <p>As mentioned there are some pitfalls to this approach:</p> <ul> <li>If there are any duplicated modules between entry chunks they will be included in both bundles.</li> <li>It isn\'t as flexible and can\'t be used to dynamically split code with the core application logic.</li> </ul> <p>The first of these two points is definitely an issue for our example, as <code>lodash</code> is also imported within <code>./src/index.js</code> and will thus be duplicated in both bundles. Let\'s remove this duplication in next section.</p> <h2 id="prevent-duplication">Prevent Duplication<a href="#prevent-duplication" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <h3 id="entry-dependencies">Entry dependencies<a href="#entry-dependencies" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>The <a href="/configuration/entry-context/#dependencies"><code>dependOn</code> option</a> allows to share the modules between the chunks:</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">const path = require(\'path\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">  mode: \'development\',\n</span><span class="token prefix unchanged"> </span><span class="token line">  entry: {\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">    index: \'./src/index.js\',\n</span><span class="token prefix deleted">-</span><span class="token line">    another: \'./src/another-module.js\',\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    index: {\n</span><span class="token prefix inserted">+</span><span class="token line">      import: \'./src/index.js\',\n</span><span class="token prefix inserted">+</span><span class="token line">      dependOn: \'shared\',\n</span><span class="token prefix inserted">+</span><span class="token line">    },\n</span><span class="token prefix inserted">+</span><span class="token line">    another: {\n</span><span class="token prefix inserted">+</span><span class="token line">      import: \'./src/another-module.js\',\n</span><span class="token prefix inserted">+</span><span class="token line">      dependOn: \'shared\',\n</span><span class="token prefix inserted">+</span><span class="token line">    },\n</span><span class="token prefix inserted">+</span><span class="token line">    shared: \'lodash\',\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">  output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    filename: \'[name].bundle.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">    path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">};</span></span></code></pre> <p>If we\'re going to use multiple entry points on a single HTML page, <code>optimization.runtimeChunk: \'single\'</code> is needed too, otherwise we could get into trouble described <a href="https://bundlers.tooling.report/code-splitting/multi-entry/">here</a>.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">const path = require(\'path\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">  mode: \'development\',\n</span><span class="token prefix unchanged"> </span><span class="token line">  entry: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    index: {\n</span><span class="token prefix unchanged"> </span><span class="token line">      import: \'./src/index.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">      dependOn: \'shared\',\n</span><span class="token prefix unchanged"> </span><span class="token line">    },\n</span><span class="token prefix unchanged"> </span><span class="token line">    another: {\n</span><span class="token prefix unchanged"> </span><span class="token line">      import: \'./src/another-module.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">      dependOn: \'shared\',\n</span><span class="token prefix unchanged"> </span><span class="token line">    },\n</span><span class="token prefix unchanged"> </span><span class="token line">    shared: \'lodash\',\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">  output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    filename: \'[name].bundle.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">    path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  optimization: {\n</span><span class="token prefix inserted">+</span><span class="token line">    runtimeChunk: \'single\',\n</span><span class="token prefix inserted">+</span><span class="token line">  },\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">};</span></span></code></pre> <p>And here\'s the result of build:</p> <pre><code class="hljs language-bash"><span class="token punctuation">..</span>.\n<span class="token punctuation">[</span>webpack-cli<span class="token punctuation">]</span> Compilation finished\nasset shared.bundle.js <span class="token number">549</span> KiB <span class="token punctuation">[</span>compared <span class="token keyword">for</span> emit<span class="token punctuation">]</span> <span class="token punctuation">(</span>name: shared<span class="token punctuation">)</span>\nasset runtime.bundle.js <span class="token number">7.79</span> KiB <span class="token punctuation">[</span>compared <span class="token keyword">for</span> emit<span class="token punctuation">]</span> <span class="token punctuation">(</span>name: runtime<span class="token punctuation">)</span>\nasset index.bundle.js <span class="token number">1.77</span> KiB <span class="token punctuation">[</span>compared <span class="token keyword">for</span> emit<span class="token punctuation">]</span> <span class="token punctuation">(</span>name: index<span class="token punctuation">)</span>\nasset another.bundle.js <span class="token number">1.65</span> KiB <span class="token punctuation">[</span>compared <span class="token keyword">for</span> emit<span class="token punctuation">]</span> <span class="token punctuation">(</span>name: another<span class="token punctuation">)</span>\nEntrypoint index <span class="token number">1.77</span> KiB <span class="token operator">=</span> index.bundle.js\nEntrypoint another <span class="token number">1.65</span> KiB <span class="token operator">=</span> another.bundle.js\nEntrypoint shared <span class="token number">557</span> KiB <span class="token operator">=</span> runtime.bundle.js <span class="token number">7.79</span> KiB shared.bundle.js <span class="token number">549</span> KiB\nruntime modules <span class="token number">3.76</span> KiB <span class="token number">7</span> modules\ncacheable modules <span class="token number">530</span> KiB\n  ./node_modules/lodash/lodash.js <span class="token number">530</span> KiB <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n  ./src/another-module.js <span class="token number">84</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n  ./src/index.js <span class="token number">257</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\nwebpack <span class="token number">5.4</span>.0 compiled successfully <span class="token keyword">in</span> <span class="token number">249</span> ms</code></pre> <p>As you can see there\'s another <code>runtime.bundle.js</code> file generated besides <code>shared.bundle.js</code>, <code>index.bundle.js</code> and <code>another.bundle.js</code>.</p> <p>Although using multiple entry points per page is allowed in webpack, it should be avoided when possible in favor of an entry point with multiple imports: <code>entry: { page: [\'./analytics\', \'./app\'] }</code>. This results in a better optimization and consistent execution order when using <code>async</code> script tags.</p> <h3 id="splitchunksplugin"><code>SplitChunksPlugin</code><a href="#splitchunksplugin" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>The <a href="/plugins/split-chunks-plugin/"><code>SplitChunksPlugin</code></a> allows us to extract common dependencies into an existing entry chunk or an entirely new chunk. Let\'s use this to de-duplicate the <code>lodash</code> dependency from the previous example:</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const path = require(\'path\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">   mode: \'development\',\n</span><span class="token prefix unchanged"> </span><span class="token line">   entry: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     index: \'./src/index.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">     another: \'./src/another-module.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line">   output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     filename: \'[name].bundle.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">     path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">   },\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   optimization: {\n</span><span class="token prefix inserted">+</span><span class="token line">     splitChunks: {\n</span><span class="token prefix inserted">+</span><span class="token line">       chunks: \'all\',\n</span><span class="token prefix inserted">+</span><span class="token line">     },\n</span><span class="token prefix inserted">+</span><span class="token line">   },\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> };</span></span></code></pre> <p>With the <a href="/plugins/split-chunks-plugin/#optimizationsplitchunks"><code>optimization.splitChunks</code></a> configuration option in place, we should now see the duplicate dependency removed from our <code>index.bundle.js</code> and <code>another.bundle.js</code>. The plugin should notice that we\'ve separated <code>lodash</code> out to a separate chunk and remove the dead weight from our main bundle. Let\'s do an <code>npm run build</code> to see if it worked:</p> <pre><code class="hljs language-bash"><span class="token punctuation">..</span>.\n<span class="token punctuation">[</span>webpack-cli<span class="token punctuation">]</span> Compilation finished\nasset vendors-node_modules_lodash_lodash_js.bundle.js <span class="token number">549</span> KiB <span class="token punctuation">[</span>compared <span class="token keyword">for</span> emit<span class="token punctuation">]</span> <span class="token punctuation">(</span>id hint: vendors<span class="token punctuation">)</span>\nasset index.bundle.js <span class="token number">8.92</span> KiB <span class="token punctuation">[</span>compared <span class="token keyword">for</span> emit<span class="token punctuation">]</span> <span class="token punctuation">(</span>name: index<span class="token punctuation">)</span>\nasset another.bundle.js <span class="token number">8.8</span> KiB <span class="token punctuation">[</span>compared <span class="token keyword">for</span> emit<span class="token punctuation">]</span> <span class="token punctuation">(</span>name: another<span class="token punctuation">)</span>\nEntrypoint index <span class="token number">558</span> KiB <span class="token operator">=</span> vendors-node_modules_lodash_lodash_js.bundle.js <span class="token number">549</span> KiB index.bundle.js <span class="token number">8.92</span> KiB\nEntrypoint another <span class="token number">558</span> KiB <span class="token operator">=</span> vendors-node_modules_lodash_lodash_js.bundle.js <span class="token number">549</span> KiB another.bundle.js <span class="token number">8.8</span> KiB\nruntime modules <span class="token number">7.64</span> KiB <span class="token number">14</span> modules\ncacheable modules <span class="token number">530</span> KiB\n  ./src/index.js <span class="token number">257</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n  ./src/another-module.js <span class="token number">84</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n  ./node_modules/lodash/lodash.js <span class="token number">530</span> KiB <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\nwebpack <span class="token number">5.4</span>.0 compiled successfully <span class="token keyword">in</span> <span class="token number">241</span> ms</code></pre> <p>Here are some other useful plugins and loaders provided by the community for splitting code:</p> <ul> <li><a href="/plugins/mini-css-extract-plugin"><code>mini-css-extract-plugin</code></a>: Useful for splitting CSS out from the main application.</li> </ul> <h2 id="dynamic-imports">Dynamic Imports<a href="#dynamic-imports" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>Two similar techniques are supported by webpack when it comes to dynamic code splitting. The first and recommended approach is to use the <a href="/api/module-methods/#import-1"><code>import()</code> syntax</a> that conforms to the <a href="https://github.com/tc39/proposal-dynamic-import">ECMAScript proposal</a> for dynamic imports. The legacy, webpack-specific approach is to use <a href="/api/module-methods/#requireensure"><code>require.ensure</code></a>. Let\'s try using the first of these two approaches...</p> <aside class="warning"><h6 class="warning__prefix">warning</h6><p><code>import()</code> calls use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">promises</a> internally. If you use <code>import()</code> with older browsers (e.g., IE 11), remember to shim <code>Promise</code> using a polyfill such as <a href="https://github.com/stefanpenner/es6-promise">es6-promise</a> or <a href="https://github.com/taylorhakes/promise-polyfill">promise-polyfill</a>.</p></aside> <p>Before we start, let\'s remove the extra <a href="/concepts/entry-points/"><code>entry</code></a> and <a href="/plugins/split-chunks-plugin"><code>optimization.splitChunks</code></a> from our configuration in the above example as they won\'t be needed for this next demonstration:</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">const path = require(\'path\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">  mode: \'development\',\n</span><span class="token prefix unchanged"> </span><span class="token line">  entry: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    index: \'./src/index.js\',\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">    another: \'./src/another-module.js\',\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">  output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    filename: \'[name].bundle.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">    path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">  optimization: {\n</span><span class="token prefix deleted">-</span><span class="token line">    splitChunks: {\n</span><span class="token prefix deleted">-</span><span class="token line">      chunks: \'all\',\n</span><span class="token prefix deleted">-</span><span class="token line">    },\n</span><span class="token prefix deleted">-</span><span class="token line">  },\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">};</span></span></code></pre> <p>We\'ll also update our project to remove the now unused files:</p> <p><strong>project</strong></p> <pre><code class="hljs language-diff">webpack-demo\n|- package.json\n|- webpack.config.js\n|- /dist\n|- /src\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> |- index.js\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> |- another-module.js\n</span></span>|- /node_modules</code></pre> <p>Now, instead of statically importing <code>lodash</code>, we\'ll use dynamic importing to separate a chunk:</p> <p><strong>src/index.js</strong></p> <pre><code class="hljs language-diff"><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">import _ from \'lodash\';\n</span><span class="token prefix deleted">-</span><span class="token line">\n</span><span class="token prefix deleted">-</span><span class="token line">function component() {\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">function getComponent() {\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  const element = document.createElement(\'div\');\n</span></span>\n<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">  // Lodash, now imported by this script\n</span><span class="token prefix deleted">-</span><span class="token line">  element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  return import(\'lodash\')\n</span><span class="token prefix inserted">+</span><span class="token line">    .then(({ default: _ }) => {\n</span><span class="token prefix inserted">+</span><span class="token line">      const element = document.createElement(\'div\');\n</span><span class="token prefix inserted">+</span><span class="token line">\n</span><span class="token prefix inserted">+</span><span class="token line">      element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n</span></span>\n<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">  return element;\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">      return element;\n</span><span class="token prefix inserted">+</span><span class="token line">    })\n</span><span class="token prefix inserted">+</span><span class="token line">    .catch((error) => \'An error occurred while loading the component\');\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">}\n</span></span>\n<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">document.body.appendChild(component());\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">getComponent().then((component) => {\n</span><span class="token prefix inserted">+</span><span class="token line">  document.body.appendChild(component);\n</span><span class="token prefix inserted">+</span><span class="token line">});</span></span></code></pre> <p>The reason we need <code>default</code> is that since webpack 4, when importing a CommonJS module, the import will no longer resolve to the value of <code>module.exports</code>, it will instead create an artificial namespace object for the CommonJS module. For more information on the reason behind this, read <a href="https://medium.com/webpack/webpack-4-import-and-commonjs-d619d626b655">webpack 4: import() and CommonJs</a>.</p> <p>Let\'s run webpack to see <code>lodash</code> separated out to a separate bundle:</p> <pre><code class="hljs language-bash"><span class="token punctuation">..</span>.\n<span class="token punctuation">[</span>webpack-cli<span class="token punctuation">]</span> Compilation finished\nasset vendors-node_modules_lodash_lodash_js.bundle.js <span class="token number">549</span> KiB <span class="token punctuation">[</span>compared <span class="token keyword">for</span> emit<span class="token punctuation">]</span> <span class="token punctuation">(</span>id hint: vendors<span class="token punctuation">)</span>\nasset index.bundle.js <span class="token number">13.5</span> KiB <span class="token punctuation">[</span>compared <span class="token keyword">for</span> emit<span class="token punctuation">]</span> <span class="token punctuation">(</span>name: index<span class="token punctuation">)</span>\nruntime modules <span class="token number">7.37</span> KiB <span class="token number">11</span> modules\ncacheable modules <span class="token number">530</span> KiB\n  ./src/index.js <span class="token number">434</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n  ./node_modules/lodash/lodash.js <span class="token number">530</span> KiB <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\nwebpack <span class="token number">5.4</span>.0 compiled successfully <span class="token keyword">in</span> <span class="token number">268</span> ms</code></pre> <p>As <code>import()</code> returns a promise, it can be used with <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function"><code>async</code> functions</a>. Here\'s how it would simplify the code:</p> <p><strong>src/index.js</strong></p> <pre><code class="hljs language-diff"><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">function getComponent() {\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">async function getComponent() {\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  const element = document.createElement(\'div\');\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  const { default: _ } = await import(\'lodash\');\n</span></span>\n<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">  return import(\'lodash\')\n</span><span class="token prefix deleted">-</span><span class="token line">    .then(({ default: _ }) => {\n</span><span class="token prefix deleted">-</span><span class="token line">      const element = document.createElement(\'div\');\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n</span></span>\n<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">      element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n</span><span class="token prefix deleted">-</span><span class="token line">\n</span><span class="token prefix deleted">-</span><span class="token line">      return element;\n</span><span class="token prefix deleted">-</span><span class="token line">    })\n</span><span class="token prefix deleted">-</span><span class="token line">    .catch((error) => \'An error occurred while loading the component\');\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  return element;\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">}\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">getComponent().then((component) => {\n</span><span class="token prefix unchanged"> </span><span class="token line">  document.body.appendChild(component);\n</span><span class="token prefix unchanged"> </span><span class="token line">});</span></span></code></pre> <aside class="tip"><h6 class="tip__prefix">tip</h6><p>It is possible to provide a <a href="/api/module-methods/#dynamic-expressions-in-import">dynamic expression</a> to <code>import()</code> when you might need to import specific module based on a computed variable later.</p></aside> <h2 id="prefetchingpreloading-modules">Prefetching/Preloading modules<a href="#prefetchingpreloading-modules" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>webpack 4.6.0+ adds support for prefetching and preloading.</p> <p>Using these inline directives while declaring your imports allows webpack to output “Resource Hint” which tells the browser that for:</p> <ul> <li><strong>prefetch</strong>: resource is probably needed for some navigation in the future</li> <li><strong>preload</strong>: resource will also be needed during the current navigation</li> </ul> <p>Simple prefetch example can be having a <code>HomePage</code> component, which renders a <code>LoginButton</code> component which then on demand loads a <code>LoginModal</code> component after being clicked.</p> <p><strong>LoginButton.js</strong></p> <pre><code class="hljs language-js"><span class="token comment">//...</span>\n<span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackPrefetch: true */</span> <span class="token string">\'./path/to/LoginModal.js\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>This will result in <code>&#x3C;link rel="prefetch" href="login-modal-chunk.js"></code> being appended in the head of the page, which will instruct the browser to prefetch in idle time the <code>login-modal-chunk.js</code> file.</p> <aside class="tip"><h6 class="tip__prefix">tip</h6><p>webpack will add the prefetch hint once the parent chunk has been loaded.</p></aside> <p>Preload directive has a bunch of differences compared to prefetch:</p> <ul> <li>A preloaded chunk starts loading in parallel to the parent chunk. A prefetched chunk starts after the parent chunk finishes loading.</li> <li>A preloaded chunk has medium priority and is instantly downloaded. A prefetched chunk is downloaded while the browser is idle.</li> <li>A preloaded chunk should be instantly requested by the parent chunk. A prefetched chunk can be used anytime in the future.</li> <li>Browser support is different.</li> </ul> <p>Simple preload example can be having a <code>Component</code> which always depends on a big library that should be in a separate chunk.</p> <p>Let\'s imagine a component <code>ChartComponent</code> which needs a huge <code>ChartingLibrary</code>. It displays a <code>LoadingIndicator</code> when rendered and instantly does an on demand import of <code>ChartingLibrary</code>:</p> <p><strong>ChartComponent.js</strong></p> <pre><code class="hljs language-js"><span class="token comment">//...</span>\n<span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackPreload: true */</span> <span class="token string">\'ChartingLibrary\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>When a page which uses the <code>ChartComponent</code> is requested, the charting-library-chunk is also requested via <code>&#x3C;link rel="preload"></code>. Assuming the page-chunk is smaller and finishes faster, the page will be displayed with a <code>LoadingIndicator</code>, until the already requested <code>charting-library-chunk</code> finishes. This will give a little load time boost since it only needs one round-trip instead of two. Especially in high-latency environments.</p> <aside class="tip"><h6 class="tip__prefix">tip</h6><p>Using <code>webpackPreload</code> incorrectly can actually hurt performance, so be careful when using it.</p></aside> <h2 id="bundle-analysis">Bundle Analysis<a href="#bundle-analysis" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>Once you start splitting your code, it can be useful to analyze the output to check where modules have ended up. The <a href="https://github.com/webpack/analyse">official analyze tool</a> is a good place to start. There are some other community-supported options out there as well:</p> <ul> <li><a href="https://alexkuz.github.io/webpack-chart/">webpack-chart</a>: Interactive pie chart for webpack stats.</li> <li><a href="https://chrisbateman.github.io/webpack-visualizer/">webpack-visualizer</a>: Visualize and analyze your bundles to see which modules are taking up space and which might be duplicates.</li> <li><a href="https://github.com/webpack-contrib/webpack-bundle-analyzer">webpack-bundle-analyzer</a>: A plugin and CLI utility that represents bundle content as a convenient interactive zoomable treemap.</li> <li><a href="https://webpack.jakoblind.no/optimize">webpack bundle optimize helper</a>: This tool will analyze your bundle and give you actionable suggestions on what to improve to reduce your bundle size.</li> <li><a href="https://github.com/bundle-stats/bundle-stats">bundle-stats</a>: Generate a bundle report(bundle size, assets, modules) and compare the results between different builds.</li> </ul> <h2 id="next-steps">Next Steps<a href="#next-steps" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>See <a href="/guides/lazy-loading/">Lazy Loading</a> for a more concrete example of how <code>import()</code> can be used in a real application and <a href="/guides/caching/">Caching</a> to learn how to split code more effectively.</p> '}}]);