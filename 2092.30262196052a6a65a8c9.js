(self.webpackChunk=self.webpackChunk||[]).push([[2092],{2092:function(n,s,e){"use strict";e.r(s),s.default='<aside class="tip"><h6 class="tip__prefix">tip</h6><p>This guide extends on code examples found in the <a href="/guides/development">Development</a> guide.</p></aside> <p>Hot Module Replacement (or HMR) is one of the most useful features offered by webpack. It allows all kinds of modules to be updated at runtime without the need for a full refresh. This page focuses on <strong>implementation</strong> while the <a href="/concepts/hot-module-replacement">concepts page</a> gives more details on how it works and why it\'s useful.</p> <aside class="warning"><h6 class="warning__prefix">warning</h6><p><strong>HMR</strong> is not intended for use in production, meaning it should only be used in development. See the <a href="/guides/production">building for production guide</a> for more information.</p></aside> <h2 id="enabling-hmr">Enabling HMR<a href="#enabling-hmr" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>This feature is great for productivity. All we need to do is update our <a href="https://github.com/webpack/webpack-dev-server">webpack-dev-server</a> configuration, and use webpack\'s built-in HMR plugin. We\'ll also remove the entry point for <code>print.js</code> as it will now be consumed by the <code>index.js</code> module.</p> <aside class="tip"><h6 class="tip__prefix">tip</h6><p>If you took the route of using <code>webpack-dev-middleware</code> instead of <code>webpack-dev-server</code>, please use the <a href="https://github.com/webpack-contrib/webpack-hot-middleware"><code>webpack-hot-middleware</code></a> package to enable HMR on your custom server or application.</p></aside> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const path = require(\'path\');\n</span><span class="token prefix unchanged"> </span><span class="token line"> const HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">   entry: {\n</span><span class="token prefix unchanged"> </span><span class="token line">      app: \'./src/index.js\',\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">      print: \'./src/print.js\',\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line">   devtool: \'inline-source-map\',\n</span><span class="token prefix unchanged"> </span><span class="token line">   devServer: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     contentBase: \'./dist\',\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     hot: true,\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line">   plugins: [\n</span><span class="token prefix unchanged"> </span><span class="token line">     new HtmlWebpackPlugin({\n</span><span class="token prefix unchanged"> </span><span class="token line">       title: \'Hot Module Replacement\',\n</span><span class="token prefix unchanged"> </span><span class="token line">     }),\n</span><span class="token prefix unchanged"> </span><span class="token line">   ],\n</span><span class="token prefix unchanged"> </span><span class="token line">   output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     filename: \'[name].bundle.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">     path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">     clean: true,\n</span><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line"> };</span></span></code></pre> <aside class="tip"><h6 class="tip__prefix">tip</h6><p>You can use the CLI to modify the <a href="https://github.com/webpack/webpack-dev-server">webpack-dev-server</a> configuration with the following command: <code>webpack serve --hot-only</code>.</p></aside> <p>Now let\'s update the <code>index.js</code> file so that when a change inside <code>print.js</code> is detected we tell webpack to accept the updated module.</p> <p><strong>index.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> import _ from \'lodash\';\n</span><span class="token prefix unchanged"> </span><span class="token line"> import printMe from \'./print.js\';\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> function component() {\n</span><span class="token prefix unchanged"> </span><span class="token line">   const element = document.createElement(\'div\');\n</span><span class="token prefix unchanged"> </span><span class="token line">   const btn = document.createElement(\'button\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   btn.innerHTML = \'Click me and check the console!\';\n</span><span class="token prefix unchanged"> </span><span class="token line">   btn.onclick = printMe;\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   element.appendChild(btn);\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   return element;\n</span><span class="token prefix unchanged"> </span><span class="token line"> }\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> document.body.appendChild(component());\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">\n</span><span class="token prefix inserted">+</span><span class="token line"> if (module.hot) {\n</span><span class="token prefix inserted">+</span><span class="token line">   module.hot.accept(\'./print.js\', function() {\n</span><span class="token prefix inserted">+</span><span class="token line">     console.log(\'Accepting the updated printMe module!\');\n</span><span class="token prefix inserted">+</span><span class="token line">     printMe();\n</span><span class="token prefix inserted">+</span><span class="token line">   })\n</span><span class="token prefix inserted">+</span><span class="token line"> }</span></span></code></pre> <p>Start changing the <code>console.log</code> statement in <code>print.js</code>, and you should see the following output in the browser console (don\'t worry about that <code>button.onclick = printMe</code> output for now, we will also update that part later).</p> <p><strong>print.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> export default function printMe() {\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">   console.log(\'I get called from print.js!\');\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   console.log(\'Updating print.js...\');\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> }</span></span></code></pre> <p><strong>console</strong></p> <pre><code class="hljs language-diff">[HMR] Waiting for update signal from WDS...\nmain.js:4395 [WDS] Hot Module Replacement enabled.\n<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> 2main.js:4395 [WDS] App updated. Recompiling...\n</span><span class="token prefix inserted">+</span><span class="token line"> main.js:4395 [WDS] App hot update...\n</span><span class="token prefix inserted">+</span><span class="token line"> main.js:4330 [HMR] Checking for updates on the server...\n</span><span class="token prefix inserted">+</span><span class="token line"> main.js:10024 Accepting the updated printMe module!\n</span><span class="token prefix inserted">+</span><span class="token line"> 0.4b8ee77â€¦.hot-update.js:10 Updating print.js...\n</span><span class="token prefix inserted">+</span><span class="token line"> main.js:4330 [HMR] Updated modules:\n</span><span class="token prefix inserted">+</span><span class="token line"> main.js:4330 [HMR]  - 20</span></span></code></pre> <h2 id="via-the-nodejs-api">Via the Node.js API<a href="#via-the-nodejs-api" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>When using Webpack Dev Server with the Node.js API, don\'t put the dev server options on the webpack configuration object. Instead, pass them as a second parameter upon creation. For example:</p> <p><code>new WebpackDevServer(compiler, options)</code></p> <p>To enable HMR, you also need to modify your webpack configuration object to include the HMR entry points. The <code>webpack-dev-server</code> package includes a method called <code>addDevServerEntrypoints</code> which you can use to do this. Here\'s a small example of how that might look:</p> <p><strong>dev-server.js</strong></p> <pre><code class="hljs language-javascript"><span class="token keyword">const</span> webpackDevServer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack-dev-server\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./webpack.config.js\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>\n  contentBase<span class="token operator">:</span> <span class="token string">\'./dist\'</span><span class="token punctuation">,</span>\n  hot<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  host<span class="token operator">:</span> <span class="token string">\'localhost\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nwebpackDevServer<span class="token punctuation">.</span><span class="token function">addDevServerEntrypoints</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> compiler <span class="token operator">=</span> <span class="token function">webpack</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">webpackDevServer</span><span class="token punctuation">(</span>compiler<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nserver<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">,</span> <span class="token string">\'localhost\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'dev server listening on port 5000\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <aside class="tip"><h6 class="tip__prefix">tip</h6><p>If you\'re <a href="/guides/development/#using-webpack-dev-middleware">using <code>webpack-dev-middleware</code></a>, check out the <a href="https://github.com/webpack-contrib/webpack-hot-middleware"><code>webpack-hot-middleware</code></a> package to enable HMR on your custom dev server.</p></aside> <h2 id="gotchas">Gotchas<a href="#gotchas" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>Hot Module Replacement can be tricky. To show this, let\'s go back to our working example. If you go ahead and click the button on the example page, you will realize the console is printing the old <code>printMe</code> function.</p> <p>This is happening because the button\'s <code>onclick</code> event handler is still bound to the original <code>printMe</code> function.</p> <p>To make this work with HMR we need to update that binding to the new <code>printMe</code> function using <code>module.hot.accept</code>:</p> <p><strong>index.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> import _ from \'lodash\';\n</span><span class="token prefix unchanged"> </span><span class="token line"> import printMe from \'./print.js\';\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> function component() {\n</span><span class="token prefix unchanged"> </span><span class="token line">   const element = document.createElement(\'div\');\n</span><span class="token prefix unchanged"> </span><span class="token line">   const btn = document.createElement(\'button\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   btn.innerHTML = \'Click me and check the console!\';\n</span><span class="token prefix unchanged"> </span><span class="token line">   btn.onclick = printMe;  // onclick event is bind to the original printMe function\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   element.appendChild(btn);\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   return element;\n</span><span class="token prefix unchanged"> </span><span class="token line"> }\n</span></span>\n<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> document.body.appendChild(component());\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> let element = component(); // Store the element to re-render on print.js changes\n</span><span class="token prefix inserted">+</span><span class="token line"> document.body.appendChild(element);\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> if (module.hot) {\n</span><span class="token prefix unchanged"> </span><span class="token line">   module.hot.accept(\'./print.js\', function() {\n</span><span class="token prefix unchanged"> </span><span class="token line">     console.log(\'Accepting the updated printMe module!\');\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">     printMe();\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     document.body.removeChild(element);\n</span><span class="token prefix inserted">+</span><span class="token line">     element = component(); // Re-render the "component" to update the click handler\n</span><span class="token prefix inserted">+</span><span class="token line">     document.body.appendChild(element);\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   })\n</span><span class="token prefix unchanged"> </span><span class="token line"> }</span></span></code></pre> <p>This is just one example, but there are many others that can easily trip people up. Luckily, there are a lot of loaders out there (some of which are mentioned below) that will make hot module replacement much easier.</p> <h2 id="hmr-with-stylesheets">HMR with Stylesheets<a href="#hmr-with-stylesheets" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>Hot Module Replacement with CSS is actually fairly straightforward with the help of the <code>style-loader</code>. This loader uses <code>module.hot.accept</code> behind the scenes to patch <code>&#x3C;style></code> tags when CSS dependencies are updated.</p> <p>First let\'s install both loaders with the following command:</p> <pre><code class="hljs language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev style-loader css-loader</code></pre> <p>Now let\'s update the configuration file to make use of the loader.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const path = require(\'path\');\n</span><span class="token prefix unchanged"> </span><span class="token line"> const HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">   entry: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     app: \'./src/index.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line">   devtool: \'inline-source-map\',\n</span><span class="token prefix unchanged"> </span><span class="token line">   devServer: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     contentBase: \'./dist\',\n</span><span class="token prefix unchanged"> </span><span class="token line">     hot: true,\n</span><span class="token prefix unchanged"> </span><span class="token line">   },\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   module: {\n</span><span class="token prefix inserted">+</span><span class="token line">     rules: [\n</span><span class="token prefix inserted">+</span><span class="token line">       {\n</span><span class="token prefix inserted">+</span><span class="token line">         test: /\\.css$/,\n</span><span class="token prefix inserted">+</span><span class="token line">         use: [\'style-loader\', \'css-loader\'],\n</span><span class="token prefix inserted">+</span><span class="token line">       },\n</span><span class="token prefix inserted">+</span><span class="token line">     ],\n</span><span class="token prefix inserted">+</span><span class="token line">   },\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   plugins: [\n</span><span class="token prefix unchanged"> </span><span class="token line">     new HtmlWebpackPlugin({\n</span><span class="token prefix unchanged"> </span><span class="token line">       title: \'Hot Module Replacement\',\n</span><span class="token prefix unchanged"> </span><span class="token line">     }),\n</span><span class="token prefix unchanged"> </span><span class="token line">   ],\n</span><span class="token prefix unchanged"> </span><span class="token line">   output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     filename: \'[name].bundle.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">     path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">     clean: true,\n</span><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line"> };</span></span></code></pre> <p>Hot loading stylesheets is as easy as importing them into a module:</p> <p><strong>project</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> webpack-demo\n</span><span class="token prefix unchanged"> </span><span class="token line"> | - package.json\n</span><span class="token prefix unchanged"> </span><span class="token line"> | - webpack.config.js\n</span><span class="token prefix unchanged"> </span><span class="token line"> | - /dist\n</span><span class="token prefix unchanged"> </span><span class="token line">   | - bundle.js\n</span><span class="token prefix unchanged"> </span><span class="token line"> | - /src\n</span><span class="token prefix unchanged"> </span><span class="token line">   | - index.js\n</span><span class="token prefix unchanged"> </span><span class="token line">   | - print.js\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   | - styles.css</span></span></code></pre> <p><strong>styles.css</strong></p> <pre><code class="hljs language-css"><span class="token selector">body</span> <span class="token punctuation">{</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <p><strong>index.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> import _ from \'lodash\';\n</span><span class="token prefix unchanged"> </span><span class="token line"> import printMe from \'./print.js\';\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> import \'./styles.css\';\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> function component() {\n</span><span class="token prefix unchanged"> </span><span class="token line">   const element = document.createElement(\'div\');\n</span><span class="token prefix unchanged"> </span><span class="token line">   const btn = document.createElement(\'button\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   btn.innerHTML = \'Click me and check the console!\';\n</span><span class="token prefix unchanged"> </span><span class="token line">   btn.onclick = printMe;  // onclick event is bind to the original printMe function\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   element.appendChild(btn);\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   return element;\n</span><span class="token prefix unchanged"> </span><span class="token line"> }\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> let element = component();\n</span><span class="token prefix unchanged"> </span><span class="token line"> document.body.appendChild(element);\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> if (module.hot) {\n</span><span class="token prefix unchanged"> </span><span class="token line">   module.hot.accept(\'./print.js\', function() {\n</span><span class="token prefix unchanged"> </span><span class="token line">     console.log(\'Accepting the updated printMe module!\');\n</span><span class="token prefix unchanged"> </span><span class="token line">     document.body.removeChild(element);\n</span><span class="token prefix unchanged"> </span><span class="token line">     element = component(); // Re-render the "component" to update the click handler\n</span><span class="token prefix unchanged"> </span><span class="token line">     document.body.appendChild(element);\n</span><span class="token prefix unchanged"> </span><span class="token line">   })\n</span><span class="token prefix unchanged"> </span><span class="token line"> }\n</span></span></code></pre> <p>Change the style on <code>body</code> to <code>background: red;</code> and you should immediately see the page\'s background color change without a full refresh.</p> <p><strong>styles.css</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> body {\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">   background: blue;\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   background: red;\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> }</span></span></code></pre> <h2 id="other-code-and-frameworks">Other Code and Frameworks<a href="#other-code-and-frameworks" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>There are many other loaders and examples out in the community to make HMR interact smoothly with a variety of frameworks and libraries...</p> <ul> <li><a href="https://github.com/gaearon/react-hot-loader">React Hot Loader</a>: Tweak react components in real time.</li> <li><a href="https://github.com/vuejs/vue-loader">Vue Loader</a>: This loader supports HMR for vue components out of the box.</li> <li><a href="https://github.com/klazuka/elm-hot-webpack-loader">Elm Hot webpack Loader</a>: Supports HMR for the Elm programming language.</li> <li><a href="https://github.com/gdi2290/angular-hmr">Angular HMR</a>: No loader necessary! A simple change to your main NgModule file is all that\'s required to have full control over the HMR APIs.</li> <li><a href="https://github.com/sveltejs/svelte-loader">Svelte Loader</a>: This loader supports HMR for Svelte components out of the box.</li> </ul> <aside class="tip"><h6 class="tip__prefix">tip</h6><p>If you know of any other loaders or plugins that help with or enhance HMR, please submit a pull request to add them to this list!</p></aside> '}}]);