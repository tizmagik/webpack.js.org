(self.webpackChunk=self.webpackChunk||[]).push([[7485],{7485:function(n,a,s){"use strict";s.r(a),a.default='<p>These options allows you to control how webpack notifies you of assets and entry points that exceed a specific file limit. This feature was inspired by the idea of <a href="https://github.com/webpack/webpack/issues/3216">webpack Performance Budgets</a>.</p> <h2 id="performance"><code>performance</code><a href="#performance" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>object</code></p> <p>Configure how performance hints are shown. For example if you have an asset that is over 250kb, webpack will emit a warning notifying you of this.</p> <h2 id="performancehints"><code>performance.hints</code><a href="#performancehints" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string = \'warning\': \'error\' | \'warning\'</code> <code>boolean: false</code></p> <p>Turns hints on/off. In addition, tells webpack to throw either an error or a warning when hints are found.</p> <p>Given an asset is created that is over 250kb:</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  performance<span class="token operator">:</span> <span class="token punctuation">{</span>\n    hints<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>No hint warnings or errors are shown.</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  performance<span class="token operator">:</span> <span class="token punctuation">{</span>\n    hints<span class="token operator">:</span> <span class="token string">\'warning\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>A warning will be displayed notifying you of a large asset. We recommend something like this for development environments.</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  performance<span class="token operator">:</span> <span class="token punctuation">{</span>\n    hints<span class="token operator">:</span> <span class="token string">\'error\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>An error will be displayed notifying you of a large asset. We recommend using <code>hints: "error"</code> during production builds to help prevent deploying production bundles that are too large, impacting webpage performance.</p> <h2 id="performancemaxentrypointsize"><code>performance.maxEntrypointSize</code><a href="#performancemaxentrypointsize" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>number = 250000</code></p> <p>An entry point represents all assets that would be utilized during initial load time for a specific entry. This option controls when webpack should emit performance hints based on the maximum entry point size in bytes.</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  performance<span class="token operator">:</span> <span class="token punctuation">{</span>\n    maxEntrypointSize<span class="token operator">:</span> <span class="token number">400000</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="performancemaxassetsize"><code>performance.maxAssetSize</code><a href="#performancemaxassetsize" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>number = 250000</code></p> <p>An asset is any emitted file from webpack. This option controls when webpack emits a performance hint based on individual asset size in bytes.</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  performance<span class="token operator">:</span> <span class="token punctuation">{</span>\n    maxAssetSize<span class="token operator">:</span> <span class="token number">100000</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="performanceassetfilter"><code>performance.assetFilter</code><a href="#performanceassetfilter" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>function(assetFilename) => boolean</code></p> <p>This property allows webpack to control what files are used to calculate performance hints. The default function is:</p> <pre><code class="hljs language-js"><span class="token keyword">function</span> <span class="token function">assetFilter</span><span class="token punctuation">(</span><span class="token parameter">assetFilename</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token operator">!</span><span class="token regex">/\\.map$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>assetFilename<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <p>You can override this property by passing your own function in:</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  performance<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">assetFilter</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">assetFilename</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> assetFilename<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">\'.js\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>The example above will only give you performance hints based on <code>.js</code> files.</p> '}}]);