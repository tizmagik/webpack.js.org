(self.webpackChunk=self.webpackChunk||[]).push([[7645],{7645:function(n,s,e){"use strict";e.r(s),s.default='<aside class="tip"><h6 class="tip__prefix">tip</h6><p>This guide extends on code examples found in the <a href="/guides/asset-management"><code>Asset Management</code></a> guide.</p></aside> <p>So far we\'ve manually included all our assets in our <code>index.html</code> file, but as your application grows and once you start <a href="/guides/caching">using hashes in filenames</a> and outputting <a href="/guides/code-splitting">multiple bundles</a>, it will be difficult to keep managing your <code>index.html</code> file manually. However, a few plugins exist that will make this process much easier to manage.</p> <h2 id="preparation">Preparation<a href="#preparation" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>First, let\'s adjust our project a little bit:</p> <p><strong>project</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> webpack-demo\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- package.json\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- webpack.config.js\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /dist\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /src\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- index.js\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   |- print.js\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> |- /node_modules</span></span></code></pre> <p>Let\'s add some logic to our <code>src/print.js</code> file:</p> <p><strong>src/print.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">printMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'I get called from print.js!\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <p>And use that function in our <code>src/index.js</code> file:</p> <p><strong>src/index.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">import _ from \'lodash\';\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">import printMe from \'./print.js\';\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">function component() {\n</span><span class="token prefix unchanged"> </span><span class="token line">  const element = document.createElement(\'div\');\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  const btn = document.createElement(\'button\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n</span></span>\n<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  btn.innerHTML = \'Click me and check the console!\';\n</span><span class="token prefix inserted">+</span><span class="token line">  btn.onclick = printMe;\n</span><span class="token prefix inserted">+</span><span class="token line">\n</span><span class="token prefix inserted">+</span><span class="token line">  element.appendChild(btn);\n</span><span class="token prefix inserted">+</span><span class="token line">\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  return element;\n</span><span class="token prefix unchanged"> </span><span class="token line">}\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">document.body.appendChild(component());</span></span></code></pre> <p>Let\'s also update our <code>dist/index.html</code> file, in preparation for webpack to split out entries:</p> <p><strong>dist/index.html</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">&#x3C;!DOCTYPE html>\n</span><span class="token prefix unchanged"> </span><span class="token line">&#x3C;html>\n</span><span class="token prefix unchanged"> </span><span class="token line">  &#x3C;head>\n</span><span class="token prefix unchanged"> </span><span class="token line">    &#x3C;meta charset="utf-8" />\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">    &#x3C;title>Asset Management&#x3C;/title>\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    &#x3C;title>Output Management&#x3C;/title>\n</span><span class="token prefix inserted">+</span><span class="token line">    &#x3C;script src="./print.bundle.js">&#x3C;/script>\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  &#x3C;/head>\n</span><span class="token prefix unchanged"> </span><span class="token line">  &#x3C;body>\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">    &#x3C;script src="bundle.js">&#x3C;/script>\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    &#x3C;script src="./index.bundle.js">&#x3C;/script>\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  &#x3C;/body>\n</span><span class="token prefix unchanged"> </span><span class="token line">&#x3C;/html></span></span></code></pre> <p>Now adjust the config. We\'ll be adding our <code>src/print.js</code> as a new entry point (<code>print</code>) and we\'ll change the output as well, so that it will dynamically generate bundle names, based on the entry point names:</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">const path = require(\'path\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">module.exports = {\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">  entry: \'./src/index.js\',\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  entry: {\n</span><span class="token prefix inserted">+</span><span class="token line">    index: \'./src/index.js\',\n</span><span class="token prefix inserted">+</span><span class="token line">    print: \'./src/print.js\',\n</span><span class="token prefix inserted">+</span><span class="token line">  },\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  output: {\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">    filename: \'bundle.js\',\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    filename: \'[name].bundle.js\',\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">    path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">};</span></span></code></pre> <p>Let\'s run <code>npm run build</code> and see what this generates:</p> <pre><code class="hljs language-bash"><span class="token punctuation">..</span>.\n<span class="token punctuation">[</span>webpack-cli<span class="token punctuation">]</span> Compilation finished\nasset index.bundle.js <span class="token number">69.5</span> KiB <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span> <span class="token punctuation">[</span>minimized<span class="token punctuation">]</span> <span class="token punctuation">(</span>name: index<span class="token punctuation">)</span> <span class="token number">1</span> related asset\nasset print.bundle.js <span class="token number">316</span> bytes <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span> <span class="token punctuation">[</span>minimized<span class="token punctuation">]</span> <span class="token punctuation">(</span>name: print<span class="token punctuation">)</span>\nruntime modules <span class="token number">1.36</span> KiB <span class="token number">7</span> modules\ncacheable modules <span class="token number">530</span> KiB\n  ./src/index.js <span class="token number">406</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n  ./src/print.js <span class="token number">83</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n  ./node_modules/lodash/lodash.js <span class="token number">530</span> KiB <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\nwebpack <span class="token number">5.4</span>.0 compiled successfully <span class="token keyword">in</span> <span class="token number">1996</span> ms</code></pre> <p>We can see that webpack generates our <code>print.bundle.js</code> and <code>index.bundle.js</code> files, which we also specified in our <code>index.html</code> file. if you open <code>index.html</code> in your browser, you can see what happens when you click the button.</p> <p>But what would happen if we changed the name of one of our entry points, or even added a new one? The generated bundles would be renamed on a build, but our <code>index.html</code> file would still reference the old names. Let\'s fix that with the <a href="/plugins/html-webpack-plugin"><code>HtmlWebpackPlugin</code></a>.</p> <h2 id="setting-up-htmlwebpackplugin">Setting up HtmlWebpackPlugin<a href="#setting-up-htmlwebpackplugin" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>First install the plugin and adjust the <code>webpack.config.js</code> file:</p> <pre><code class="hljs language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev html-webpack-plugin</code></pre> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">const path = require(\'path\');\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">const HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">  entry: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    index: \'./src/index.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">    print: \'./src/print.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  plugins: [\n</span><span class="token prefix inserted">+</span><span class="token line">    new HtmlWebpackPlugin({\n</span><span class="token prefix inserted">+</span><span class="token line">      title: \'Output Management\',\n</span><span class="token prefix inserted">+</span><span class="token line">    }),\n</span><span class="token prefix inserted">+</span><span class="token line">  ],\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    filename: \'[name].bundle.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">    path: path.resolve(__dirname, \'dist\'),\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">};</span></span></code></pre> <p>Before we do a build, you should know that the <code>HtmlWebpackPlugin</code> by default will generate its own <code>index.html</code> file, even though we already have one in the <code>dist/</code> folder. This means that it will replace our <code>index.html</code> file with a newly generated one. Let\'s see what happens when we do an <code>npm run build</code>:</p> <pre><code class="hljs language-bash"><span class="token punctuation">..</span>.\n<span class="token punctuation">[</span>webpack-cli<span class="token punctuation">]</span> Compilation finished\nasset index.bundle.js <span class="token number">69.5</span> KiB <span class="token punctuation">[</span>compared <span class="token keyword">for</span> emit<span class="token punctuation">]</span> <span class="token punctuation">[</span>minimized<span class="token punctuation">]</span> <span class="token punctuation">(</span>name: index<span class="token punctuation">)</span> <span class="token number">1</span> related asset\nasset print.bundle.js <span class="token number">316</span> bytes <span class="token punctuation">[</span>compared <span class="token keyword">for</span> emit<span class="token punctuation">]</span> <span class="token punctuation">[</span>minimized<span class="token punctuation">]</span> <span class="token punctuation">(</span>name: print<span class="token punctuation">)</span>\nasset index.html <span class="token number">253</span> bytes <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span>\nruntime modules <span class="token number">1.36</span> KiB <span class="token number">7</span> modules\ncacheable modules <span class="token number">530</span> KiB\n  ./src/index.js <span class="token number">406</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n  ./src/print.js <span class="token number">83</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n  ./node_modules/lodash/lodash.js <span class="token number">530</span> KiB <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\nwebpack <span class="token number">5.4</span>.0 compiled successfully <span class="token keyword">in</span> <span class="token number">2189</span> ms</code></pre> <p>If you open <code>index.html</code> in your code editor, you\'ll see that the <code>HtmlWebpackPlugin</code> has created an entirely new file for you and that all the bundles are automatically added.</p> <p>If you want to learn more about all the features and options that the <code>HtmlWebpackPlugin</code> provides, then you should read up on it on the <a href="https://github.com/jantimon/html-webpack-plugin"><code>HtmlWebpackPlugin</code></a> repo.</p> <h2 id="cleaning-up-the-dist-folder">Cleaning up the <code>/dist</code> folder<a href="#cleaning-up-the-dist-folder" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>As you might have noticed over the past guides and code example, our <code>/dist</code> folder has become quite cluttered. Webpack will generate the files and put them in the <code>/dist</code> folder for you, but it doesn\'t keep track of which files are actually in use by your project.</p> <p>In general it\'s good practice to clean the <code>/dist</code> folder before each build, so that only used files will be generated. Let\'s take care of that with <a href="/configuration/output/#outputclean"><code>output.clean</code></a> option.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">const path = require(\'path\');\n</span><span class="token prefix unchanged"> </span><span class="token line">const HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">  entry: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    index: \'./src/index.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">    print: \'./src/print.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">  plugins: [\n</span><span class="token prefix unchanged"> </span><span class="token line">    new HtmlWebpackPlugin({\n</span><span class="token prefix unchanged"> </span><span class="token line">      title: \'Output Management\',\n</span><span class="token prefix unchanged"> </span><span class="token line">    }),\n</span><span class="token prefix unchanged"> </span><span class="token line">  ],\n</span><span class="token prefix unchanged"> </span><span class="token line">  output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">    filename: \'[name].bundle.js\',\n</span><span class="token prefix unchanged"> </span><span class="token line">    path: path.resolve(__dirname, \'dist\'),\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    clean: true,\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">};</span></span></code></pre> <p>Now run an <code>npm run build</code> and inspect the <code>/dist</code> folder. If everything went well you should now only see the files generated from the build and no more old files!</p> <h2 id="the-manifest">The Manifest<a href="#the-manifest" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>You might be wondering how webpack and its plugins seem to "know" what files are being generated. The answer is in the manifest that webpack keeps to track how all the modules map to the output bundles. If you\'re interested in managing webpack\'s <a href="/configuration/output"><code>output</code></a> in other ways, the manifest would be a good place to start.</p> <p>The manifest data can be extracted into a json file for easy consumption using the <a href="https://github.com/shellscape/webpack-manifest-plugin"><code>WebpackManifestPlugin</code></a>.</p> <p>We won\'t go through a full example of how to use this plugin within your projects, but you can read up on <a href="/concepts/manifest">the concept page</a> and the <a href="/guides/caching">caching guide</a> to find out how this ties into long term caching.</p> <h2 id="conclusion">Conclusion<a href="#conclusion" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>Now that you\'ve learned about dynamically adding bundles to your HTML, let\'s dive into the <a href="/guides/development">development guide</a>. Or, if you want to dig into more advanced topics, we would recommend heading over to the <a href="/guides/code-splitting">code splitting guide</a>.</p> '}}]);